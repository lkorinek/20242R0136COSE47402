[
  {
    "task_id": "Rust/0",
    "instruction": "Write a Rust function `has_close_elements(numbers:Vec<f32>, threshold: f32) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.",
    "generated_code": "fn has_close_elements(numbers: Vec<f32>, threshold: f32) -> bool {\n    for i in 0..numbers.len() - 1 {\n        for j in i + 1..numbers.len() {\n            if (numbers[j] - numbers[i]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_has_close_elements() {\n        assert_eq!(has_close_elements(vec![11.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n        assert_eq!(has_close_elements(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n        assert_eq!(has_close_elements(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n        assert_eq!(has_close_elements(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n        assert_eq!(has_close_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n        assert_eq!(has_close_elements(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n        assert_eq!(has_close_elements(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/1",
    "instruction": "Write a Rust function `separate_paren_groups(paren_string: String) -> Vec<String>` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.",
    "generated_code": "fn separate_paren_groups(paren_string: String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut group = String::new();\n    let mut stack = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n            '(' => {\n                stack.push(c);\n                group.push(c);\n            }\n            ')' => {\n                if stack.pop() == Some('(') {\n                    groups.push(group);\n                    group = String::new();\n                } else {\n                    group.push(c);\n                }\n            }\n            _ => group.push(c),\n        }\n    }\n    groups\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_separate_paren_groups() {\n        assert_eq!(\n            separate_paren_groups(String::from(\"(()()) ((())) () ((())()())\")),\n            vec![\"(()())\", \"((()))\", \"()\", \"((())()())\"]\n        );\n        assert_eq!(\n            separate_paren_groups(String::from(\"() (()) ((())) (((())))\")),\n            vec![\"()\", \"(())\", \"((()))\", \"(((())))\"]\n        );\n        assert_eq!(\n            separate_paren_groups(String::from(\"(()(())((())))\")),\n            vec![\"(()(())((())))\"]\n        );\n        assert_eq!(\n            separate_paren_groups(String::from(\"( ) (( )) (( )( ))\")),\n            vec![\"()\", \"(())\", \"(()())\"]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/2",
    "instruction": "Write a Rust function `truncate_number(number: &f32) -> f32` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.",
    "generated_code": "fn truncate_number(number: &f32) -> f32 {\n    number - number.floor()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_truncate_number() {\n        assert_eq!(truncate_number(&3.5), 0.5);\n        let t1: f32 = 1.33 - 0.33;\n        assert!(truncate_number(&t1) < 0.000001);\n        let t2: f32 = 123.456 - 0.456;\n        assert!(truncate_number(&t2) < 0.000001);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/3",
    "instruction": "Write a Rust function `below_zero(operations:Vec<i32>) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.",
    "generated_code": "fn below_zero(operations: Vec<i32>) -> bool {\n    let mut balance = 0;\n    for operation in operations {\n        balance += operation;\n        if balance < 0 {\n            return true;\n        }\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_below_zero() {\n        assert_eq!(below_zero(vec![]), false);\n        assert_eq!(below_zero(vec![1, 2, -3, 1, 2, -3]), false);\n        assert_eq!(below_zero(vec![1, 2, -4, 5, 6]), true);\n        assert_eq!(below_zero(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n        assert_eq!(below_zero(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n        assert_eq!(below_zero(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/4",
    "instruction": "Write a Rust function `mean_absolute_deviation(numbers:Vec<f32>) -> f32` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |",
    "generated_code": "fn mean_absolute_deviation(numbers: Vec<f32>) -> f32 {\n    let mean = numbers.iter().sum::<f32>() / numbers.len() as f32;\n    let deviation = numbers.iter().map(|&x| (x - mean).abs()).sum::<f32>() / numbers.len() as f32;\n    deviation\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n  #[test]\n    fn test_mean_absolute_deviation() {\n        assert!(mean_absolute_deviation(vec![1.0, 2.0, 3.0]) - 2.0 / 3.0 < 0.000001);\n        assert!(mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0]) - 1.0 < 0.000001);\n        assert!(mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0 < 0.000001);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/5",
    "instruction": "Write a Rust function `intersperse(numbers:Vec<u32>, delimeter: u32) -> Vec<u32>` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'",
    "generated_code": "fn intersperse(numbers: Vec<u32>, delimeter: u32) -> Vec<u32> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len() {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_intersperse() {\n        assert!(intersperse(vec![], 7) == vec![]);\n        assert!(intersperse(vec![5, 6, 3, 2], 8) == vec![5, 8, 6, 8, 3, 8, 2]);\n        assert!(intersperse(vec![2, 2, 2], 2) == vec![2, 2, 2, 2, 2]);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/6",
    "instruction": "Write a Rust function `parse_nested_parens(paren_string:String) -> Vec<i32>` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.",
    "generated_code": "fn parse_nested_parens(paren_string:String) -> Vec<i32> {\n    let mut result = Vec::new();\n    for group in paren_string.split(\" \") {\n        let mut stack = Vec::new();\n        for c in group.chars() {\n            match c {\n                '(' => stack.push(c),\n                ')' => {\n                    stack.pop();\n                    if stack.len() > result.len() {\n                        result.push(stack.len() as i32);\n                    }\n                }\n                _ => {}\n            }\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_parse_nested_parens() {\n        assert!(\n            parse_nested_parens(String::from(\"(()()) ((())) () ((())()())\")) == vec![2, 3, 1, 3]\n        );\n        assert!(parse_nested_parens(String::from(\"() (()) ((())) (((())))\")) == vec![1, 2, 3, 4]);\n        assert!(parse_nested_parens(String::from(\"(()(())((())))\")) == vec![4]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/7",
    "instruction": "Write a Rust function `filter_by_substring(strings: Vec<String>, substring:String) -> Vec<String>` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_filter_by_substring() {\n        let v_empty: Vec<String> = vec![];\n        assert!(filter_by_substring(vec![], String::from(\"john\")) == v_empty);\n        assert!(\n            filter_by_substring(\n                vec![\n                    \"xxx\".to_string(),\n                    \"asd\".to_string(),\n                    \"xxy\".to_string(),\n                    \"john doe\".to_string(),\n                    \"xxxAAA\".to_string(),\n                    \"xxx\".to_string()\n                ],\n                String::from(\"xxx\")\n            ) == vec![\"xxx\", \"xxxAAA\", \"xxx\"]\n        );\n        assert!(\n            filter_by_substring(\n                vec![\n                    \"xxx\".to_string(),\n                    \"asd\".to_string(),\n                    \"aaaxxy\".to_string(),\n                    \"john doe\".to_string(),\n                    \"xxxAAA\".to_string(),\n                    \"xxx\".to_string()\n                ],\n                String::from(\"xx\")\n            ) == vec![\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n        );\n        assert!(\n            filter_by_substring(\n                vec![\n                    \"grunt\".to_string(),\n                    \"trumpet\".to_string(),\n                    \"prune\".to_string(),\n                    \"gruesome\".to_string()\n                ],\n                String::from(\"run\")\n            ) == [\"grunt\", \"prune\"]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/8",
    "instruction": "Write a Rust function `sum_product(numbers:Vec<i32>) -> (i32,i32)` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.",
    "generated_code": "fn sum_product(numbers: Vec<i32>) -> (i32, i32) {\n    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n    }\n    (sum, product)\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_sum_product() {\n        assert!(sum_product(vec![]) == (0, 1));\n        assert!(sum_product(vec![1, 1, 1]) == (3, 1));\n        assert!(sum_product(vec![100, 0]) == (100, 0));\n        assert!(sum_product(vec![3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7));\n        assert!(sum_product(vec![10]) == (10, 10));\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/9",
    "instruction": "Write a Rust function `rolling_max(numbers:Vec<i32>) -> Vec<i32>` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.",
    "generated_code": "fn rolling_max(numbers: Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = numbers[0];\n    let mut result = Vec::new();\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_rolling_max() {\n        assert!(rolling_max(vec![]) == vec![]);\n        assert!(rolling_max(vec![1, 2, 3, 4]) == vec![1, 2, 3, 4]);\n        assert!(rolling_max(vec![4, 3, 2, 1]) == vec![4, 4, 4, 4]);\n        assert!(rolling_max(vec![3, 2, 3, 100, 3]) == vec![3, 3, 3, 100, 100]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/10",
    "instruction": "Write a Rust function `make_palindrome(str: &str) -> String` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.",
    "generated_code": "fn make_palindrome(str: &str) -> String {\n    let mut rev = str.chars().rev().collect::<String>();\n    let mut palindromic_suffix = \"\";\n    for i in 0..str.len() {\n        if str.chars().skip(i).collect::<String>() == rev {\n            palindromic_suffix = &str[i..];\n            break;\n        }\n    }\n    let mut prefix = \"\";\n    for i in 0..str.len() - palindromic_suffix.len() {\n        if str.chars().take(i).collect::<String>() == rev.chars().take(i).collect::<String>() {\n            prefix = &str[..i];\n            break;\n        }\n    }\n    format!(\"{}{}{}\", prefix, palindromic_suffix, rev)\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_make_palindrome() {\n        assert_eq!(make_palindrome(\"\"), \"\");\n        assert_eq!(make_palindrome(\"x\"), \"x\");\n        assert_eq!(make_palindrome(\"xyz\"), \"xyzyx\");\n        assert_eq!(make_palindrome(\"xyx\"), \"xyx\");\n        assert_eq!(make_palindrome(\"jerry\"), \"jerryrrej\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/11",
    "instruction": "Write a Rust function `string_xor(a:String, b:String) -> String` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.",
    "generated_code": "fn string_xor(a: String, b: String) -> String {\n    let mut result = String::new();\n    for (i, c) in a.chars().zip(b.chars()) {\n        result.push(if i == c { '0' } else { '1' });\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_string_xor() {\n        assert!(string_xor(\"111000\".to_string(), \"101010\".to_string()) == \"010010\");\n        assert!(string_xor(\"1\".to_string(), \"1\".to_string()) == \"0\");\n        assert!(string_xor(\"0101\".to_string(), \"0000\".to_string()) == \"0101\");\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/12",
    "instruction": "Write a Rust function `longest(strings:Vec<String>) -> Option<String>` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.",
    "generated_code": "fn longest(strings: Vec<String>) -> Option<String> {\n    let mut longest = None;\n    for s in strings {\n        if let Some(ref mut current_longest) = longest {\n            if s.len() > current_longest.len() {\n                *current_longest = s;\n            }\n        } else {\n            longest = Some(s);\n        }\n    }\n    longest\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_longest() {\n        assert!(longest(vec![]) == None);\n        assert!(\n            longest(vec![\"x\".to_string(), \"y\".to_string(), \"z\".to_string()])\n                == Some(\"x\".to_string())\n        );\n        assert!(\n            longest(vec![\n                \"x\".to_string(),\n                \"yyy\".to_string(),\n                \"zzzz\".to_string(),\n                \"www\".to_string(),\n                \"kkkk\".to_string(),\n                \"abc\".to_string()\n            ]) == Some(\"zzzz\".to_string())\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/13",
    "instruction": "Write a Rust function `greatest_common_divisor(mut a:i32,mut b:i32) -> i32` to solve the following problem:\nReturn a greatest common divisor of two integers a and b",
    "generated_code": "fn greatest_common_divisor(mut a:i32,mut b:i32) -> i32 {\n    while b != 0 {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_greatest_common_divisor() {\n        assert!(greatest_common_divisor(3, 7) == 1);\n        assert!(greatest_common_divisor(10, 15) == 5);\n        assert!(greatest_common_divisor(49, 14) == 7);\n        assert!(greatest_common_divisor(144, 60) == 12);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/14",
    "instruction": "Write a Rust function `all_prefixes(string: String) -> Vec<String>` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string",
    "generated_code": "fn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[..i].to_string());\n    }\n    prefixes.push(string.clone());\n    prefixes\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_all_prefixes() {\n        let v_empty: Vec<String> = vec![];\n        assert!(all_prefixes(String::from(\"\")) == v_empty);\n        assert!(\n            all_prefixes(String::from(\"asdfgh\"))\n                == vec![\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n        );\n        assert!(all_prefixes(String::from(\"WWW\")) == vec![\"W\", \"WW\", \"WWW\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/15",
    "instruction": "Write a Rust function `string_sequence(n:i32) -> String` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.",
    "generated_code": "fn string_sequence(n: i32) -> String {\n    let mut result = String::new();\n    for i in 0..n+1 {\n        result.push_str(i.to_string().as_str());\n        result.push_str(\" \");\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_string_sequence() {\n        assert!(string_sequence(0) == \"0\".to_string());\n        assert!(string_sequence(3) == \"0 1 2 3\".to_string());\n        assert!(string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\".to_string());\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/16",
    "instruction": "Write a Rust function `count_distinct_characters(str:String) -> i32` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of",
    "generated_code": "fn count_distinct_characters(str: String) -> i32 {\n    let mut char_set = HashSet::new();\n    for c in str.chars() {\n        char_set.insert(c.to_lowercase().next().unwrap());\n    }\n    char_set.len() as i32\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_count_distinct_characters() {\n        assert!(count_distinct_characters(\"\".to_string()) == 0);\n        assert!(count_distinct_characters(\"abcde\".to_string()) == 5);\n        assert!(\n            count_distinct_characters(\n                \"abcde\".to_string() + &\"cade\".to_string() + &\"CADE\".to_string()\n            ) == 5\n        );\n        assert!(count_distinct_characters(\"aaaaAAAAaaaa\".to_string()) == 1);\n        assert!(count_distinct_characters(\"Jerry jERRY JeRRRY\".to_string()) == 5);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/17",
    "instruction": "Write a Rust function `parse_music(music_string:String) -> Vec<i32>` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_parse_music() {\n        assert!(parse_music(\" \".to_string()) == []);\n        assert!(parse_music(\"o o o o\".to_string()) == vec![4, 4, 4, 4]);\n        assert!(parse_music(\".| .| .| .|\".to_string()) == vec![1, 1, 1, 1]);\n        assert!(parse_music(\"o| o| .| .| o o o o\".to_string()) == vec![2, 2, 1, 1, 4, 4, 4, 4]);\n        assert!(parse_music(\"o| .| o| .| o o| o o|\".to_string()) == vec![2, 1, 2, 1, 4, 2, 4, 2]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/18",
    "instruction": "Write a Rust function `how_many_times(string: String, substring:String) -> i32` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.",
    "generated_code": "fn how_many_times(string: String, substring: String) -> i32 {\n    let mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if string[i..i+substring.len()] == substring {\n            count += 1;\n            i += substring.len();\n        } else {\n            i += 1;\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_how_many_times() {\n        assert!(how_many_times(\"\".to_string(), \"x\".to_string()) == 0);\n        assert!(how_many_times(\"xyxyxyx\".to_string(), \"x\".to_string()) == 4);\n        assert!(how_many_times(\"cacacacac\".to_string(), \"cac\".to_string()) == 4);\n        assert!(how_many_times(\"john doe\".to_string(), \"john\".to_string()) == 1);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/19",
    "instruction": "Write a Rust function `sort_numbers(numbers:String) -> String` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_sort_numbers() {\n        assert!(sort_numbers(\"\".to_string()) == \"\".to_string());\n        assert!(sort_numbers(\"three\".to_string()) == \"three\".to_string());\n        assert!(sort_numbers(\"three five nine\".to_string()) == \"three five nine\");\n        assert!(\n            sort_numbers(\"five zero four seven nine eight\".to_string())\n                == \"zero four five seven eight nine\".to_string()\n        );\n        assert!(\n            sort_numbers(\"six five four three two one zero\".to_string())\n                == \"zero one two three four five six\".to_string()\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/20",
    "instruction": "Write a Rust function `find_closest_elements(numbers:Vec<f32>) -> (f32,f32)` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).",
    "generated_code": "fn find_closest_elements(numbers: Vec<f32>) -> (f32, f32) {\n    let mut closest_pair = (numbers[0], numbers[1]);\n    let mut min_diff = (closest_pair.0 - closest_pair.1).abs();\n    for i in 0..numbers.len() - 1 {\n        for j in i + 1..numbers.len() {\n            let diff = (numbers[i] - numbers[j]).abs();\n            if diff < min_diff {\n                min_diff = diff;\n                closest_pair = (numbers[i], numbers[j]);\n            }\n        }\n    }\n    closest_pair\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_find_closest_elements() {\n        assert!(find_closest_elements(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0));\n        assert!(find_closest_elements(vec![1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9));\n        assert!(find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2));\n        assert!(find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0));\n        assert!(find_closest_elements(vec![1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1));\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/21",
    "instruction": "Write a Rust function `rescale_to_unit(numbers:Vec<f32>) -> Vec<f32>` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1",
    "generated_code": "fn rescale_to_unit(numbers: Vec<f32>) -> Vec<f32> {\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_rescale_to_unit() {\n        assert!(rescale_to_unit(vec![2.0, 49.9]) == [0.0, 1.0]);\n        assert!(rescale_to_unit(vec![100.0, 49.9]) == [1.0, 0.0]);\n        assert!(rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n        assert!(rescale_to_unit(vec![2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n        assert!(rescale_to_unit(vec![12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/22",
    "instruction": "Write a Rust function `filter_integers(values: Vec<Box<dyn Any>>) -> Vec<i32>` to solve the following problem:\nFilter given list of any python values only for integers",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_filter_integers() {\n        assert_eq!(filter_integers(vec![]), vec![]);\n        let v_empty: Vec<Box<dyn Any>> = vec![];\n        assert_eq!(\n            filter_integers(vec![\n                Box::new(4),\n                Box::new(v_empty),\n                Box::new(23.2),\n                Box::new(9),\n                Box::new(String::from(\"adasd\"))\n            ]),\n            vec![4, 9]\n        );\n        assert_eq!(\n            filter_integers(vec![\n                Box::new(3),\n                Box::new('c'),\n                Box::new(3),\n                Box::new(3),\n                Box::new('a'),\n                Box::new('b')\n            ]),\n            vec![3, 3, 3]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/23",
    "instruction": "Write a Rust function `strlen(strings:String) -> i32` to solve the following problem:\nReturn length of given string",
    "generated_code": "fn strlen(strings:String) -> i32 {\n    let mut count = 0;\n    for _ in strings.chars() {\n        count += 1;\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_strlen() {\n        assert!(strlen(\"\".to_string()) == 0);\n        assert!(strlen(\"x\".to_string()) == 1);\n        assert!(strlen(\"asdasnakj\".to_string()) == 9);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/24",
    "instruction": "Write a Rust function `largest_divisor(n:i32) -> i32` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n",
    "generated_code": "fn largest_divisor(n: i32) -> i32 {\n    let mut divisor = 1;\n    while n % divisor == 0 {\n        divisor += 1;\n    }\n    divisor - 1\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_largest_divisor() {\n        assert!(largest_divisor(3) == 1);\n        assert!(largest_divisor(7) == 1);\n        assert!(largest_divisor(10) == 5);\n        assert!(largest_divisor(100) == 50);\n        assert!(largest_divisor(49) == 7);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/25",
    "instruction": "Write a Rust function `factorize(n: i32) -> Vec<i32>` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors",
    "generated_code": "fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut n = n;\n    for i in 2..n {\n        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    factors.push(n);\n    factors\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_factorize() {\n        assert_eq!(factorize(2), vec![2]);\n        assert_eq!(factorize(4), vec![2, 2]);\n        assert_eq!(factorize(8), vec![2, 2, 2]);\n        assert_eq!(factorize(3 * 19), vec![3, 19]);\n        assert_eq!(factorize(3 * 19 * 3 * 19), vec![3, 3, 19, 19]);\n        assert_eq!(\n            factorize(3 * 19 * 3 * 19 * 3 * 19),\n            vec![3, 3, 3, 19, 19, 19]\n        );\n        assert_eq!(factorize(3 * 19 * 19 * 19), vec![3, 19, 19, 19]);\n        assert_eq!(factorize(3 * 2 * 3), vec![2, 3, 3]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/26",
    "instruction": "Write a Rust function `remove_duplicates(numbers: Vec<i32>) -> Vec<i32>` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.",
    "generated_code": "fn remove_duplicates(numbers: Vec<i32>) -> Vec<i32> {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n    for num in numbers {\n        if seen.insert(num) {\n            result.push(num);\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_remove_duplicates() {\n        assert!(remove_duplicates(vec![]) == []);\n        assert!(remove_duplicates(vec![1, 2, 3, 4]) == vec![1, 2, 3, 4]);\n        assert!(remove_duplicates(vec![1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/27",
    "instruction": "Write a Rust function `flip_case(string: String) -> String` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
    "generated_code": "fn flip_case(string: String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c\n        }\n    }).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_flip_case() {\n        assert!(flip_case(\"\".to_string()) == \"\".to_string());\n        assert!(flip_case(\"Hello!\".to_string()) == \"hELLO!\".to_string());\n        assert!(\n            flip_case(\"These violent delights have violent ends\".to_string())\n                == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\".to_string()\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/28",
    "instruction": "Write a Rust function `concatenate(strings:Vec<String>) -> String` to solve the following problem:\nConcatenate list of strings into a single string",
    "generated_code": "fn concatenate(strings: Vec<String>) -> String {\n    strings.join(\"\")\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_concatenate() {\n        assert!(concatenate(vec![]) == \"\".to_string());\n        assert!(\n            concatenate(vec![\"x\".to_string(), \"y\".to_string(), \"z\".to_string()])\n                == \"xyz\".to_string()\n        );\n        assert!(\n            concatenate(vec![\n                \"x\".to_string(),\n                \"y\".to_string(),\n                \"z\".to_string(),\n                \"w\".to_string(),\n                \"k\".to_string()\n            ]) == \"xyzwk\".to_string()\n        );\n    }\n\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/29",
    "instruction": "Write a Rust function `filter_by_prefix(strings:Vec<String>, prefix:String)-> Vec<String>` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.",
    "generated_code": "fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_filter_by_prefix() {\n        let v_empty: Vec<String> = vec![];\n        assert!(filter_by_prefix(vec![], \"john\".to_string()) == v_empty);\n        assert!(\n            filter_by_prefix(\n                vec![\n                    \"xxx\".to_string(),\n                    \"asd\".to_string(),\n                    \"xxy\".to_string(),\n                    \"john doe\".to_string(),\n                    \"xxxAAA\".to_string(),\n                    \"xxx\".to_string()\n                ],\n                \"xxx\".to_string()\n            ) == vec![\"xxx\", \"xxxAAA\", \"xxx\"]\n        );\n    }\n\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/30",
    "instruction": "Write a Rust function `get_positive(numbers:Vec<i32>) -> Vec<i32>` to solve the following problem:\nReturn only positive numbers in the list.",
    "generated_code": "fn get_positive(numbers: Vec<i32>) -> Vec<i32> {\n    numbers.into_iter().filter(|&x| x > 0).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n  #[test]\n    fn test_get_positive() {\n        assert!(get_positive(vec![-1, -2, 4, 5, 6]) == [4, 5, 6]);\n        assert!(\n            get_positive(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n        );\n        assert!(get_positive(vec![-1, -2]) == []);\n        assert!(get_positive(vec![]) == []);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/31",
    "instruction": "Write a Rust function `is_prime(n:i32) -> bool` to solve the following problem:\nReturn true if a given number is prime, and false otherwise.",
    "generated_code": "fn is_prime(n: i32) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_prime() {\n        assert!(is_prime(6) == false);\n        assert!(is_prime(101) == true);\n        assert!(is_prime(11) == true);\n        assert!(is_prime(13441) == true);\n        assert!(is_prime(61) == true);\n        assert!(is_prime(4) == false);\n        assert!(is_prime(1) == false);\n        assert!(is_prime(5) == true);\n        assert!(is_prime(11) == true);\n        assert!(is_prime(17) == true);\n        assert!(is_prime(5 * 17) == false);\n        assert!(is_prime(11 * 7) == false);\n        assert!(is_prime(13441 * 19) == false);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/32",
    "instruction": "Write a Rust function `find_zero(xs: &Vec<f64>) -> f64` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.",
    "generated_code": "fn find_zero(xs: &Vec<f64>) -> f64 {\n    let mut x = 0.0;\n    let mut y = 0.0;\n    for i in 0..xs.len() {\n        x = x * 2.0 + 1.0;\n        y = y * 2.0 + xs[i];\n    }\n    x / y\n}",
    "test": "\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_poly() {\n        let mut rng = rand::thread_rng();\n        let mut solution: f64;\n        let mut ncoeff: i32;\n        for _ in 0..100 {\n            ncoeff = 2 * (1 + rng.gen_range(0, 4));\n            let mut coeffs = vec![];\n            for _ in 0..ncoeff {\n                let coeff = -10 + rng.gen_range(0, 21);\n                if coeff == 0 {\n                    coeffs.push(1.0);\n                } else {\n                    coeffs.push(coeff as f64);\n                }\n            }\n            solution = find_zero(&coeffs);\n            assert!(poly(&coeffs, solution).abs() < 1e-3);\n        }\n    }\n\n}\n\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/33",
    "instruction": "Write a Rust function `sort_third(l: Vec<i32>) -> Vec<i32>` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_sort_third() {\n        let mut l = vec![1, 2, 3];\n        assert_eq!(sort_third(l), vec![1, 2, 3]);\n        l = vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\n        assert_eq!(sort_third(l), vec![5, 3, -5, 1, -3, 3, 2, 0, 123, 9, -10]);\n        l = vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10];\n        assert_eq!(sort_third(l), vec![5, 8, -12, -10, 23, 2, 3, 11, 12, 4]);\n        l = vec![5, 6, 3, 4, 8, 9, 2];\n        assert_eq!(sort_third(l), vec![5, 6, 3, 2, 8, 9, 4]);\n        l = vec![5, 8, 3, 4, 6, 9, 2];\n        assert_eq!(sort_third(l), vec![5, 8, 3, 2, 6, 9, 4]);\n        l = vec![5, 6, 9, 4, 8, 3, 2];\n        assert_eq!(sort_third(l), vec![5, 6, 9, 2, 8, 3, 4]);\n        l = vec![5, 6, 3, 4, 8, 9, 2, 1];\n        assert_eq!(sort_third(l), vec![5, 6, 3, 2, 8, 9, 4, 1]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/34",
    "instruction": "Write a Rust function `unique(nmbs:Vec<i32>)  -> Vec<i32>` to solve the following problem:\nReturn sorted unique elements in a list",
    "generated_code": "fn unique(nmbs: Vec<i32>) -> Vec<i32> {\n    let mut sorted = nmbs.clone();\n    sorted.sort();\n    sorted.dedup();\n    sorted\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n  #[test]\n    fn test_unique() {\n        assert!(unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]) == vec![0, 2, 3, 5, 9, 123]);\n    }\n\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/35",
    "instruction": "Write a Rust function `maximum(nmbs:Vec<i32>) -> i32` to solve the following problem:\nReturn maximum element in the list.",
    "generated_code": "fn maximum(nmbs: Vec<i32>) -> i32 {\n    let mut max = nmbs[0];\n    for i in 1..nmbs.len() {\n        if nmbs[i] > max {\n            max = nmbs[i];\n        }\n    }\n    max\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_maximum() {\n        assert!(maximum(vec![1, 2, 3]) == 3);\n        assert!(maximum(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124);\n    }\n\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/36",
    "instruction": "Write a Rust function `fizz_buzz(n:i32) -> i32` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
    "generated_code": "fn fizz_buzz(n: i32) -> i32 {\n    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut num = i;\n            while num > 0 {\n                if num % 10 == 7 {\n                    count += 1;\n                }\n                num /= 10;\n            }\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_fizz_buzz() {\n        assert!(fizz_buzz(50) == 0);\n        assert!(fizz_buzz(78) == 2);\n        assert!(fizz_buzz(79) == 3);\n        assert!(fizz_buzz(100) == 3);\n        assert!(fizz_buzz(200) == 6);\n        assert!(fizz_buzz(4000) == 192);\n        assert!(fizz_buzz(10000) == 639);\n        assert!(fizz_buzz(100000) == 8026);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/37",
    "instruction": "Write a Rust function `sort_even(nmbs:Vec<i32>) -> Vec<i32>` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.",
    "generated_code": "fn sort_even(nmbs:Vec<i32>) -> Vec<i32> {\n    let mut nmbs_even = Vec::new();\n    for i in 0..nmbs.len() {\n        if i % 2 == 0 {\n            nmbs_even.push(nmbs[i]);\n        }\n    }\n    nmbs_even.sort();\n    let mut nmbs_sorted = Vec::new();\n    for i in 0..nmbs.len() {\n        if i % 2 == 0 {\n            nmbs_sorted.push(nmbs_even[i]);\n        } else {\n            nmbs_sorted.push(nmbs[i]);\n        }\n    }\n    nmbs_sorted\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_sort_even() {\n        assert_eq!(sort_even(vec![1, 2, 3]), vec![1, 2, 3]);\n        assert_eq!(\n            sort_even(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\n            vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]\n        );\n        assert_eq!(\n            sort_even(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\n            vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/38",
    "instruction": "Write a Rust function `decode_cyclic(s: &str) -> String` to solve the following problem:\ntakes as input string encoded with encode_cyclic function. Returns decoded string.",
    "generated_code": "fn decode_cyclic(s: &str) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n        while j < s.len() && s.as_bytes()[j] != b' ' {\n            j += 1;\n        }\n        let mut k = j;\n        while k < s.len() && s.as_bytes()[k] == b' ' {\n            k += 1;\n        }\n        let mut c = 0;\n        while k < s.len() && s.as_bytes()[k] != b' ' {\n            c = c * 10 + (s.as_bytes()[k] - b'0') as usize;\n            k += 1;\n        }\n        let mut s = String::new();\n        for _ in 0..c {\n            s.push(s.as_bytes()[i % j] as char);\n            i += 1;\n        }\n        result.push_str(&s);\n        i = k;\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_decode_cyclic() {\n        for _ in 0..100 {\n            let l = 10 + rand::random::<u32>() % 11;\n            let mut str = String::new();\n            for _ in 0..l {\n                let chr = 97 + rand::random::<u32>() % 26;\n                str.push(chr as u8 as char);\n            }\n            let encoded_str = encode_cyclic(&str);\n            assert_eq!(decode_cyclic(&encoded_str), str);\n        }\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/39",
    "instruction": "Write a Rust function `prime_fib(n: i32) -> i32` to solve the following problem:\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.",
    "generated_code": "fn prime_fib(n: i32) -> i32 {\n    let mut fib = vec![1, 1];\n    let mut prime = vec![true, true];\n    let mut i = 2;\n    while fib.len() < n as usize {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        prime.push(true);\n        i += 1;\n    }\n    for i in 2..(n as usize) {\n        if fib[i] % 2 == 0 {\n            prime[i] = false;\n        }\n        for j in (3..((fib[i] as f64).sqrt() as i32 + 1)).step_by(2) {\n            if fib[i] % j == 0 {\n                prime[i] = false;\n                break;\n            }\n        }\n    }\n    for i in 2..(n as usize) {\n        if prime[i] {\n            return fib[i];\n        }\n    }\n    return -1;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_prime_fib() {\n        assert_eq!(prime_fib(1), 2);\n        assert_eq!(prime_fib(2), 3);\n        assert_eq!(prime_fib(3), 5);\n        assert_eq!(prime_fib(4), 13);\n        assert_eq!(prime_fib(5), 89);\n        assert_eq!(prime_fib(6), 233);\n        assert_eq!(prime_fib(7), 1597);\n        assert_eq!(prime_fib(8), 28657);\n        assert_eq!(prime_fib(9), 514229);\n        assert_eq!(prime_fib(10), 433494437);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/40",
    "instruction": "Write a Rust function `triples_sum_to_zero(nmbs:Vec<i32>) -> bool` to solve the following problem:\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.",
    "generated_code": "fn triples_sum_to_zero(nmbs: Vec<i32>) -> bool {\n    let mut nmbs = nmbs;\n    nmbs.sort();\n    for i in 0..nmbs.len() - 2 {\n        if nmbs[i] == 0 {\n            continue;\n        }\n        let mut left = i + 1;\n        let mut right = nmbs.len() - 1;\n        while left < right {\n            let sum = nmbs[i] + nmbs[left] + nmbs[right];\n            if sum == 0 {\n                return true;\n            } else if sum < 0 {\n                left += 1;\n            } else {\n                right -= 1;\n            }\n        }\n    }\n    false\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_triples_sum_to_zero() {\n        assert!(triples_sum_to_zero(vec![1, 3, 5, 0]) == false);\n        assert!(triples_sum_to_zero(vec![1, 3, 5, -1]) == false);\n        assert!(triples_sum_to_zero(vec![1, 3, -2, 1]) == true);\n        assert!(triples_sum_to_zero(vec![1, 2, 3, 7]) == false);\n        assert!(triples_sum_to_zero(vec![1, 2, 5, 7]) == false);\n        assert!(triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7]) == true);\n        assert!(triples_sum_to_zero(vec![1]) == false);\n        assert!(triples_sum_to_zero(vec![1, 3, 5, -100]) == false);\n        assert!(triples_sum_to_zero(vec![100, 3, 5, -100]) == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/41",
    "instruction": "Write a Rust function `car_race_collision(n:i32)-> i32` to solve the following problem:\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.",
    "generated_code": "fn car_race_collision(n:i32)-> i32 {",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_car_race_collision() {\n        assert!(car_race_collision(2) == 4);\n        assert!(car_race_collision(3) == 9);\n        assert!(car_race_collision(4) == 16);\n        assert!(car_race_collision(8) == 64);\n        assert!(car_race_collision(10) == 100);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/42",
    "instruction": "Write a Rust function `incr_list(l:Vec<i32>) -> Vec<i32>` to solve the following problem:\nReturn list with elements incremented by 1.",
    "generated_code": "fn incr_list(l:Vec<i32>) -> Vec<i32> {\n    l.iter().map(|x| x+1).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_incr_list() {\n        assert!(incr_list(vec![]) == vec![]);\n        assert!(incr_list(vec![3, 2, 1]) == [4, 3, 2]);\n        assert!(incr_list(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/43",
    "instruction": "Write a Rust function `pairs_sum_to_zero(l:Vec<i32>) -> bool` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.",
    "generated_code": "fn pairs_sum_to_zero(l:Vec<i32>) -> bool {\n    let mut m = HashMap::new();\n    for i in l {\n        if m.contains_key(&i) {\n            return true;\n        }\n        m.insert(i, 1);\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_pairs_sum_to_zero() {\n        assert!(pairs_sum_to_zero(vec![1, 3, 5, 0]) == false);\n        assert!(pairs_sum_to_zero(vec![1, 3, -2, 1]) == false);\n        assert!(pairs_sum_to_zero(vec![1, 2, 3, 7]) == false);\n        assert!(pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7]) == true);\n        assert!(pairs_sum_to_zero(vec![1]) == false);\n        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 3, 2, 30]) == true);\n        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 3, 2, 31]) == true);\n        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 4, 2, 30]) == false);\n        assert!(pairs_sum_to_zero(vec![-3, 9, -1, 4, 2, 31]) == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/44",
    "instruction": "Write a Rust function `change_base(x:i32, base:i32) -> String` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.",
    "generated_code": "fn change_base(x: i32, base: i32) -> String {\n    let mut result = String::new();\n    let mut x = x;\n    let mut base = base;\n    while x > 0 {\n        result = format!(\"{}{}\", (x % base) as u8 as char, result);\n        x /= base;\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_change_base() {\n        assert!(change_base(8, 3) == \"22\".to_string());\n        assert!(change_base(9, 3) == \"100\".to_string());\n        assert!(change_base(234, 2) == \"11101010\".to_string());\n        assert!(change_base(16, 2) == \"10000\".to_string());\n        assert!(change_base(8, 2) == \"1000\".to_string());\n        assert!(change_base(7, 2) == \"111\".to_string());\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/45",
    "instruction": "Write a Rust function `triangle_area(a:i32, h:i32) -> f64` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.",
    "generated_code": "fn triangle_area(a:i32, h:i32) -> f64 {\n    let s = (a + h + h) as f64;\n    if s > a as f64 && s > h as f64 {\n        return (a as f64 * h as f64) / 2.0;\n    }\n    -1.0\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_triangle_area() {\n        assert!(triangle_area(5, 3) == 7.5);\n        assert!(triangle_area(2, 2) == 2.0);\n        assert!(triangle_area(10, 8) == 40.0);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/46",
    "instruction": "Write a Rust function `fib4(n:i32) -> i32` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.",
    "generated_code": "fn fib4(n: i32) -> i32 {\n    let mut fib4 = vec![0, 0, 2, 0];\n    for i in 4..n+1 {\n        fib4.push(fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]);\n    }\n    fib4[n]\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_fib4() {\n        assert!(fib4(5) == 4);\n        assert!(fib4(8) == 28);\n        assert!(fib4(10) == 104);\n        assert!(fib4(12) == 386);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/47",
    "instruction": "Write a Rust function `median(l:Vec<i32>) -> f64` to solve the following problem:\nReturn median of elements in the list l.",
    "generated_code": "fn median(l: Vec<i32>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_median() {\n        assert!(median(vec![3, 1, 2, 4, 5]) == 3.0);\n        assert!(median(vec![-10, 4, 6, 1000, 10, 20]) == 8.0);\n        assert!(median(vec![5]) == 5.0);\n        assert!(median(vec![6, 5]) == 5.5);\n        assert!(median(vec![8, 1, 3, 9, 9, 2, 7]) == 7.0);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/48",
    "instruction": "Write a Rust function `is_palindrome(text: String) -> bool` to solve the following problem:\nChecks if given string is a palindrome",
    "generated_code": "fn is_palindrome(text: String) -> bool {\n    text.chars().rev().collect::<String>() == text\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_is_palindrome() {\n        assert!(is_palindrome(\"\".to_string()) == true);\n        assert!(is_palindrome(\"aba\".to_string()) == true);\n        assert!(is_palindrome(\"aaaaa\".to_string()) == true);\n        assert!(is_palindrome(\"zbcd\".to_string()) == false);\n        assert!(is_palindrome(\"xywyx\".to_string()) == true);\n        assert!(is_palindrome(\"xywyz\".to_string()) == false);\n        assert!(is_palindrome(\"xywzx\".to_string()) == false);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/49",
    "instruction": "Write a Rust function `modp(n: i32, p: i32) -> i32` to solve the following problem:\nReturn 2^n modulo p (be aware of numerics).",
    "generated_code": "fn modp(n: i32, p: i32) -> i32 {\n    let mut result = 1;\n    let mut base = 2;\n    for _ in 0..n {\n        result = (result * base) % p;\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_modp() {\n        assert!(modp(3, 5) == 3);\n        assert!(modp(1101, 101) == 2);\n        assert!(modp(0, 101) == 1);\n        assert!(modp(3, 11) == 8);\n        assert!(modp(100, 101) == 1);\n        assert!(modp(30, 5) == 4);\n        assert!(modp(31, 5) == 3);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/50",
    "instruction": "Write a Rust function `decode_shift(s: &str) -> String` to solve the following problem:\ntakes as input string encoded with encode_shift function. Returns decoded string.",
    "generated_code": "fn decode_shift(s: &str) -> String {\n    let mut decoded = String::new();\n    for c in s.chars() {\n        if c.is_digit(10) {\n            let shift = c.to_digit(10).unwrap();\n            let next = s.chars().nth(1).unwrap();\n            let decoded_char = (next as u8 + shift as u8) as char;\n            decoded.push(decoded_char);\n            s.chars().nth(2);\n        } else {\n            decoded.push(c);\n        }\n    }\n    decoded\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    //Imposing that random characters that can be generated are solely from the alphabet\n    fn test_decode_encode() {\n        fn random_char() -> char {\n            let mut rng = rand::thread_rng();\n            let letter: char = match rng.gen_range(0, 2) {\n                0 => rng.gen_range(b'a', b'z' + 1).into(),\n                1 => rng.gen_range(b'A', b'Z' + 1).into(),\n                _ => unreachable!(),\n            };\n            return letter;\n        }\n\n        let mut rng = rand::thread_rng();\n        for _ in 0..100 {\n            let r1: i32 = rng.gen();\n            let l: i32 = 10 + r1 % 11;\n            let mut str: String = \"\".to_string();\n\n            for _ in 0..l {\n                let chr: char = random_char();\n                println!(\"{}\", chr);\n                str.push(chr);\n            }\n\n            let encoded_str: String = encode_shift(&str);\n            assert!(decode_shift(&encoded_str) == str);\n        }\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/51",
    "instruction": "Write a Rust function `remove_vowels(text: &str) -> String` to solve the following problem:\nremove_vowels is a function that takes string and returns string without vowels.",
    "generated_code": "fn remove_vowels(text: &str) -> String {\n    text.chars().filter(|c| !\"aeiouAEIOU\".contains(c)).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_remove_vowels() {\n        assert!(remove_vowels(\"\") == \"\");\n        assert!(remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n        assert!(remove_vowels(\"fedcba\") == \"fdcb\");\n        assert!(remove_vowels(\"eeeee\") == \"\");\n        assert!(remove_vowels(\"acBAA\") == \"cB\");\n        assert!(remove_vowels(\"EcBOO\") == \"cB\");\n        assert!(remove_vowels(\"ybcd\") == \"ybcd\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/52",
    "instruction": "Write a Rust function `below_threshold(l: Vec<i32>, t: i32) -> bool` to solve the following problem:\nReturn True if all numbers in the list l are below threshold t.",
    "generated_code": "fn below_threshold(l: Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_below_threshold() {\n        assert!(below_threshold(vec![1, 2, 4, 10], 100));\n        assert!(!below_threshold(vec![1, 20, 4, 10], 5));\n        assert!(below_threshold(vec![1, 20, 4, 10], 21));\n        assert!(below_threshold(vec![1, 20, 4, 10], 22));\n        assert!(below_threshold(vec![1, 8, 4, 10], 11));\n        assert!(!below_threshold(vec![1, 8, 4, 10], 10));\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/53",
    "instruction": "Write a Rust function `add(x:i32, y:i32) -> i32` to solve the following problem:\nAdd two numbers x and y",
    "generated_code": "fn add(x: i32, y: i32) -> i32 {\n    x + y\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_add() {\n        assert!(add(0, 1) == 1);\n        assert!(add(1, 0) == 1);\n        assert!(add(2, 3) == 5);\n        assert!(add(5, 7) == 12);\n        assert!(add(7, 5) == 12);\n        for _ in 0..100 {\n            let mut rng = rand::thread_rng();\n            let mut x: i32 = rng.gen();\n            x = x % 1000;\n            let mut y: i32 = rng.gen();\n            y = y % 1000;\n\n            assert!(add(x, y) == x + y);\n        }\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/54",
    "instruction": "Write a Rust function `same_chars(str1:&str, str2:&str) -> bool` to solve the following problem:\nCheck if two words have the same characters.",
    "generated_code": "fn same_chars(str1:&str, str2:&str) -> bool {\n    let mut str1_chars = str1.chars();\n    let mut str2_chars = str2.chars();\n    while let (Some(c1), Some(c2)) = (str1_chars.next(), str2_chars.next()) {\n        if c1 != c2 {\n            return false;\n        }\n    }\n    return true;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_same_chars() {\n        assert!(same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n        assert!(same_chars(\"abcd\", \"dddddddabc\") == true);\n        assert!(same_chars(\"dddddddabc\", \"abcd\") == true);\n        assert!(same_chars(\"eabcd\", \"dddddddabc\") == false);\n        assert!(same_chars(\"abcd\", \"dddddddabcf\") == false);\n        assert!(same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n        assert!(same_chars(\"aabb\", \"aaccc\") == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/55",
    "instruction": "Write a Rust function `fib(n:i32) -> i32` to solve the following problem:\nReturn n-th Fibonacci number.",
    "generated_code": "fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_fib() {\n        assert!(fib(10) == 55);\n        assert!(fib(1) == 1);\n        assert!(fib(8) == 21);\n        assert!(fib(11) == 89);\n        assert!(fib(12) == 144);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/56",
    "instruction": "Write a Rust function `correct_bracketing(bkts:&str) -> bool` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.",
    "generated_code": "fn correct_bracketing(bkts:&str) -> bool {\n    let mut stack = Vec::new();\n    for bkt in bkts.chars() {\n        match bkt {\n            '<' => stack.push(bkt),\n            '>' => {\n                if stack.pop() != Some('<') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_correct_bracketing() {\n        assert!(correct_bracketing(\"<>\"));\n        assert!(correct_bracketing(\"<<><>>\"));\n        assert!(correct_bracketing(\"<><><<><>><>\"));\n        assert!(correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n        assert!(!(correct_bracketing(\"<<<><>>>>\")));\n        assert!(!(correct_bracketing(\"><<>\")));\n        assert!(!(correct_bracketing(\"<\")));\n        assert!(!(correct_bracketing(\"<<<<\")));\n        assert!(!(correct_bracketing(\">\")));\n        assert!(!(correct_bracketing(\"<<>\")));\n        assert!(!(correct_bracketing(\"<><><<><>><>><<>\")));\n        assert!(!(correct_bracketing(\"<><><<><>><>>><>\")));\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/57",
    "instruction": "Write a Rust function `monotonic( l:Vec<i32>) -> bool` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.",
    "generated_code": "fn monotonic(l: Vec<i32>) -> bool {\n    let mut inc = true;\n    let mut dec = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            dec = false;\n        } else if l[i] > l[i - 1] {\n            inc = false;\n        }\n    }\n    inc || dec\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_monotonic() {\n        assert!(monotonic(vec![1, 2, 4, 10]) == true);\n        assert!(monotonic(vec![1, 2, 4, 20]) == true);\n        assert!(monotonic(vec![1, 20, 4, 10]) == false);\n        assert!(monotonic(vec![4, 1, 0, -10]) == true);\n        assert!(monotonic(vec![4, 1, 1, 0]) == true);\n        assert!(monotonic(vec![1, 2, 3, 2, 5, 60]) == false);\n        assert!(monotonic(vec![1, 2, 3, 4, 5, 60]) == true);\n        assert!(monotonic(vec![9, 9, 9, 9]) == true);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/58",
    "instruction": "Write a Rust function `common(l1:Vec<i32>, l2:Vec<i32>) -> Vec<i32>` to solve the following problem:\nReturn sorted unique common elements for two lists.",
    "generated_code": "fn common(l1: Vec<i32>, l2: Vec<i32>) -> Vec<i32> {\n    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut res = Vec::new();\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            res.push(l1[i]);\n            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    res\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_common() {\n        assert!(\n            common(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]) == vec![1, 5, 653]\n        );\n        assert!(common(vec![5, 3, 2, 8], vec![3, 2]) == vec![2, 3]);\n        assert!(common(vec![4, 3, 2, 8], vec![3, 2, 4]) == vec![2, 3, 4]);\n        assert!(common(vec![4, 3, 2, 8], vec![]) == vec![]);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/59",
    "instruction": "Write a Rust function `largest_prime_factor(n:i32) -> i32` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.",
    "generated_code": "fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_largest_prime_factor() {\n        assert!(largest_prime_factor(15) == 5);\n        assert!(largest_prime_factor(27) == 3);\n        assert!(largest_prime_factor(63) == 7);\n        assert!(largest_prime_factor(330) == 11);\n        assert!(largest_prime_factor(13195) == 29);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/60",
    "instruction": "Write a Rust function `sum_to_n(n: i32) -> i32` to solve the following problem:\nsum_to_n is a function that sums numbers from 1 to n.",
    "generated_code": "fn sum_to_n(n: i32) -> i32 {\n    let mut sum = 0;\n    for i in 1..n+1 {\n        sum += i;\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_sum_to_n() {\n        assert!(sum_to_n(1) == 1);\n        assert!(sum_to_n(6) == 21);\n        assert!(sum_to_n(11) == 66);\n        assert!(sum_to_n(30) == 465);\n        assert!(sum_to_n(100) == 5050);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/61",
    "instruction": "Write a Rust function `correct_bracketing_parenthesis(bkts:&str) -> bool` to solve the following problem:\nbrackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.",
    "generated_code": "fn correct_bracketing_parenthesis(bkts:&str) -> bool {\n    let mut stack = Vec::new();\n    for bkt in bkts.chars() {\n        match bkt {\n            '(' => stack.push(bkt),\n            ')' => {\n                if stack.pop() != Some('(') {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_correct_bracketing_parenthesis() {\n        assert!(correct_bracketing_parenthesis(\"()\"));\n        assert!(correct_bracketing_parenthesis(\"(()())\"));\n        assert!(correct_bracketing_parenthesis(\"()()(()())()\"));\n        assert!(correct_bracketing_parenthesis(\"()()((()()())())(()()(()))\"));\n        assert!(!(correct_bracketing_parenthesis(\"((()())))\")));\n        assert!(!(correct_bracketing_parenthesis(\")(()\")));\n        assert!(!(correct_bracketing_parenthesis(\"(\")));\n        assert!(!(correct_bracketing_parenthesis(\"((((\")));\n        assert!(!(correct_bracketing_parenthesis(\")\")));\n        assert!(!(correct_bracketing_parenthesis(\"(()\")));\n        assert!(!(correct_bracketing_parenthesis(\"()()(()())())(()\")));\n        assert!(!(correct_bracketing_parenthesis(\"()()(()())()))()\")));\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/62",
    "instruction": "Write a Rust function `derivative(xs:Vec<i32>) -> Vec<i32>` to solve the following problem:\nxs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\nReturn derivative of this polynomial in the same form.",
    "generated_code": "fn derivative(xs: Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(i as i32 * xs[i]);\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_derivative() {\n        assert!(derivative(vec![3, 1, 2, 4, 5]) == vec![1, 4, 12, 20]);\n        assert!(derivative(vec![1, 2, 3]) == vec![2, 6]);\n        assert!(derivative(vec![3, 2, 1]) == vec![2, 2]);\n        assert!(derivative(vec![3, 2, 1, 0, 4]) == vec![2, 2, 0, 16]);\n        assert!(derivative(vec![1]) == vec![]);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/63",
    "instruction": "Write a Rust function `fibfib(n:i32) -> i32` to solve the following problem:\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.",
    "generated_code": "fn fibfib(n: i32) -> i32 {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_fibfib() {\n        assert!(fibfib(2) == 1);\n        assert!(fibfib(1) == 0);\n        assert!(fibfib(5) == 4);\n        assert!(fibfib(8) == 24);\n        assert!(fibfib(10) == 81);\n        assert!(fibfib(12) == 274);\n        assert!(fibfib(14) == 927);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/64",
    "instruction": "Write a Rust function `vowels_count(s:&str) -> i32` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.",
    "generated_code": "fn vowels_count(s:&str) -> i32 {\n    let mut count = 0;\n    for c in s.chars() {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => count += 1,\n            'y' if s.ends_with('y') => count += 1,\n            _ => (),\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_vowels_count() {\n        assert!(vowels_count(\"abcde\") == 2);\n        assert!(vowels_count(\"Alone\") == 3);\n        assert!(vowels_count(\"key\") == 2);\n        assert!(vowels_count(\"bye\") == 1);\n        assert!(vowels_count(\"keY\") == 2);\n        assert!(vowels_count(\"bYe\") == 1);\n        assert!(vowels_count(\"ACEDY\") == 3);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/65",
    "instruction": "Write a Rust function `circular_shift(x:i32, shift:i32) -> String` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.",
    "generated_code": "fn circular_shift(x: i32, shift: i32) -> String {\n    let mut x = x;\n    let mut shift = shift;\n    let mut result = String::new();\n    while x > 0 {\n        let digit = x % 10;\n        x /= 10;\n        if shift > 0 {\n            shift -= 1;\n        } else {\n            result.push_str(&digit.to_string());\n        }\n    }\n    if shift > 0 {\n        result.push_str(&(x % 10).to_string());\n    }\n    result.chars().rev().collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n #[test]\n    fn test_circular_shift() {\n        assert!(circular_shift(100, 2) == \"001\");\n        assert!(circular_shift(12, 8) == \"12\");\n        // original test   asert (circular_shift(97, 8) == \"79\"); DATASET ERROR\n        assert!(circular_shift(97, 8) == \"97\");\n        assert!(circular_shift(12, 1) == \"21\");\n        assert!(circular_shift(11, 101) == \"11\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/66",
    "instruction": "Write a Rust function `digitSum(s:&str) -> i32` to solve the following problem:\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.",
    "generated_code": "fn digitSum(s:&str) -> i32 {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as i32;\n        }\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_digitSum() {\n        assert!(digitSum(\"\") == 0);\n        assert!(digitSum(\"abAB\") == 131);\n        assert!(digitSum(\"abcCd\") == 67);\n        assert!(digitSum(\"helloE\") == 69);\n        assert!(digitSum(\"woArBld\") == 131);\n        assert!(digitSum(\"aAaaaXa\") == 153);\n        assert!(digitSum(\" How are yOu?\") == 151);\n        assert!(digitSum(\"You arE Very Smart\") == 327);\n    }\n\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/67",
    "instruction": "Write a Rust function `fruit_distribution(s:&str, n:i32) -> i32` to solve the following problem:\nIn this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_fruit_distribution() {\n        assert!(fruit_distribution(\"5 apples and 6 oranges\", 19) == 8);\n        assert!(fruit_distribution(\"5 apples and 6 oranges\", 21) == 10);\n        assert!(fruit_distribution(\"0 apples and 1 oranges\", 3) == 2);\n        assert!(fruit_distribution(\"1 apples and 0 oranges\", 3) == 2);\n        assert!(fruit_distribution(\"2 apples and 3 oranges\", 100) == 95);\n        assert!(fruit_distribution(\"2 apples and 3 oranges\", 5) == 0);\n        assert!(fruit_distribution(\"1 apples and 100 oranges\", 120) == 19);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/68",
    "instruction": "Write a Rust function `pluck(arr:Vec<i32>) -> Vec<i32>` to solve the following problem:\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value",
    "generated_code": "fn pluck(arr: Vec<i32>) -> Vec<i32> {\n    let mut min_even = i32::MAX;\n    let mut min_even_index = i32::MAX;\n    let mut min_even_value = i32::MAX;\n    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_index = i as i32;\n            min_even_value = v;\n        }\n    }\n    if min_even == i32::MAX {\n        return vec![];\n    }\n    vec![min_even_value, min_even_index]\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_pluck() {\n        assert!(pluck(vec![4, 2, 3]) == vec![2, 1]);\n        assert!(pluck(vec![1, 2, 3]) == vec![2, 1]);\n        assert!(pluck(vec![]) == vec![]);\n        assert!(pluck(vec![5, 0, 3, 0, 4, 2]) == vec![0, 1]);\n        assert!(pluck(vec![1, 2, 3, 0, 5, 3]) == vec![0, 3]);\n        assert!(pluck(vec![5, 4, 8, 4, 8]) == vec![4, 1]);\n        assert!(pluck(vec![7, 6, 7, 1]) == vec![6, 1]);\n        assert!(pluck(vec![7, 9, 7, 1]) == vec![]);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/69",
    "instruction": "Write a Rust function `search(lst: Vec<i32>) -> i32` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.",
    "generated_code": "fn search(lst: Vec<i32>) -> i32 {\n    let mut map = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    for (k, v) in map {\n        if k > v {\n            return k;\n        }\n    }\n    -1\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_search() {\n        assert!(search(vec![5, 5, 5, 5, 1]) == 1);\n        assert!(search(vec![4, 1, 4, 1, 4, 4]) == 4);\n        assert!(search(vec![3, 3]) == -1);\n        assert!(search(vec![8, 8, 8, 8, 8, 8, 8, 8]) == 8);\n        assert!(search(vec![2, 3, 3, 2, 2]) == 2);\n        assert!(\n            search(vec![\n                2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1\n            ]) == 1\n        );\n        assert!(search(vec![3, 2, 8, 2]) == 2);\n        assert!(search(vec![6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1);\n        assert!(search(vec![8, 8, 3, 6, 5, 6, 4]) == -1);\n        assert!(\n            search(vec![\n                6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9\n            ]) == 1\n        );\n        assert!(search(vec![1, 9, 10, 1, 3]) == 1);\n        assert!(\n            search(vec![\n                6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10\n            ]) == 5\n        );\n        assert!(search(vec![1]) == 1);\n        assert!(\n            search(vec![\n                8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5\n            ]) == 4\n        );\n        assert!(\n            search(vec![\n                2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10\n            ]) == 2\n        );\n        assert!(search(vec![1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1);\n        assert!(\n            search(vec![\n                9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\n                10, 9, 4\n            ]) == 4\n        );\n        assert!(\n            search(vec![\n                2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7\n            ]) == 4\n        );\n        assert!(\n            search(vec![\n                9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1\n            ]) == 2\n        );\n        assert!(\n            search(vec![\n                5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8\n            ]) == -1\n        );\n        assert!(search(vec![10]) == -1);\n        assert!(search(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2);\n        assert!(search(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1);\n        assert!(\n            search(vec![\n                7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6\n            ]) == 1\n        );\n        assert!(search(vec![3, 10, 10, 9, 2]) == -1);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/70",
    "instruction": "Write a Rust function `strange_sort_list(lst: Vec<i32>) -> Vec<i32>` to solve the following problem:\nGiven list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.",
    "generated_code": "fn strange_sort_list(lst: Vec<i32>) -> Vec<i32> {\n    let mut sorted_list = Vec::new();\n    let mut remaining_list = lst;\n    while !remaining_list.is_empty() {\n        let min = remaining_list.iter().min().unwrap();\n        sorted_list.push(*min);\n        remaining_list.retain(|&x| x != *min);\n        if !remaining_list.is_empty() {\n            let max = remaining_list.iter().max().unwrap();\n            sorted_list.push(*max);\n            remaining_list.retain(|&x| x != *max);\n        }\n    }\n    sorted_list\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n#[test]\n    fn test_strange_sort_list() {\n        assert!(strange_sort_list(vec![1, 2, 3, 4]) == vec![1, 4, 2, 3]);\n        assert!(strange_sort_list(vec![5, 6, 7, 8, 9]) == vec![5, 9, 6, 8, 7]);\n        assert!(strange_sort_list(vec![1, 2, 3, 4, 5]) == vec![1, 5, 2, 4, 3]);\n        assert!(strange_sort_list(vec![5, 6, 7, 8, 9, 1]) == vec![1, 9, 5, 8, 6, 7]);\n        assert!(strange_sort_list(vec![5, 5, 5, 5]) == vec![5, 5, 5, 5]);\n        assert!(strange_sort_list(vec![]) == vec![]);\n        assert!(strange_sort_list(vec![1, 2, 3, 4, 5, 6, 7, 8]) == vec![1, 8, 2, 7, 3, 6, 4, 5]);\n        assert!(\n            strange_sort_list(vec![0, 2, 2, 2, 5, 5, -5, -5]) == vec![-5, 5, -5, 5, 0, 2, 2, 2]\n        );\n        assert!(strange_sort_list(vec![111111]) == vec![111111]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/71",
    "instruction": "Write a Rust function `triangle_area_f64(a:f64, b:f64, c:f64) -> f64` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.",
    "generated_code": "fn triangle_area_f64(a:f64, b:f64, c:f64) -> f64 {\n    if a + b > c && b + c > a && a + c > b {\n        let s = (a + b + c) / 2.0;\n        return ((s * (s - a) * (s - b) * (s - c)).sqrt()).round() / 100.0;\n    }\n    -1.0\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_triangle_area_f64() {\n        assert!(f64::abs(triangle_area_f64(3.0, 4.0, 5.0) - 6.00) < 0.01);\n        assert!(f64::abs(triangle_area_f64(1.0, 2.0, 10.0) + 1.0) < 0.01);\n        assert!(f64::abs(triangle_area_f64(4.0, 8.0, 5.0) - 8.18) < 0.01);\n        assert!(f64::abs(triangle_area_f64(2.0, 2.0, 2.0) - 1.73) < 0.01);\n        assert!(f64::abs(triangle_area_f64(1.0, 2.0, 3.0) + 1.0) < 0.01);\n        assert!(f64::abs(triangle_area_f64(10.0, 5.0, 7.0) - 16.25) < 0.01);\n        assert!(f64::abs(triangle_area_f64(2.0, 6.0, 3.0) + 1.0) < 0.01);\n        assert!(f64::abs(triangle_area_f64(1.0, 1.0, 1.0) - 0.43) < 0.01);\n        assert!(f64::abs(triangle_area_f64(2.0, 2.0, 10.0) + 1.0) < 0.01);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/72",
    "instruction": "Write a Rust function `will_it_fly(q:Vec<i32>, w:i32) -> bool` to solve the following problem:\nWrite a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
    "generated_code": "fn will_it_fly(q:Vec<i32>, w:i32) -> bool {\n    let mut sum = 0;\n    for i in q.iter() {\n        sum += i;\n    }\n    if sum > w {\n        return false;\n    }\n    let mut rev = q.clone();\n    rev.reverse();\n    if q == rev {\n        return true;\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_will_it_fly() {\n        assert!(will_it_fly(vec![3, 2, 3], 9) == true);\n        assert!(will_it_fly(vec![1, 2], 5) == false);\n        assert!(will_it_fly(vec![3], 5) == true);\n        assert!(will_it_fly(vec![3, 2, 3], 1) == false);\n        assert!(will_it_fly(vec![1, 2, 3], 6) == false);\n        assert!(will_it_fly(vec![5], 5) == true);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/73",
    "instruction": "Write a Rust function `smallest_change(arr:Vec<i32>) -> i32` to solve the following problem:\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_smallest_change() {\n        assert!(smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6]) == 4);\n        assert!(smallest_change(vec![1, 2, 3, 4, 3, 2, 2]) == 1);\n        assert!(smallest_change(vec![1, 4, 2]) == 1);\n        assert!(smallest_change(vec![1, 4, 4, 2]) == 1);\n        assert!(smallest_change(vec![1, 2, 3, 2, 1]) == 0);\n        assert!(smallest_change(vec![3, 1, 1, 3]) == 0);\n        assert!(smallest_change(vec![1]) == 0);\n        assert!(smallest_change(vec![0, 1]) == 1);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/74",
    "instruction": "Write a Rust function `total_match(lst1:Vec<&str>, lst2:Vec<&str>) -> Vec<String>` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.",
    "generated_code": "fn total_match(lst1:Vec<&str>, lst2:Vec<&str>) -> Vec<String> {\n    let mut total1 = 0;\n    let mut total2 = 0;\n    for s in lst1.iter() {\n        total1 += s.len();\n    }\n    for s in lst2.iter() {\n        total2 += s.len();\n    }\n    if total1 < total2 {\n        lst1.iter().map(|s| s.to_string()).collect()\n    } else if total1 > total2 {\n        lst2.iter().map(|s| s.to_string()).collect()\n    } else {\n        lst1.iter().map(|s| s.to_string()).collect()\n    }\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_total_match() {\n        let v_empty: Vec<String> = vec![];\n        assert!(total_match(vec![], vec![]) == v_empty);\n        assert!(total_match(vec![\"hi\", \"admin\"], vec![\"hi\", \"hi\"]) == vec![\"hi\", \"hi\"]);\n        assert!(\n            total_match(vec![\"hi\", \"admin\"], vec![\"hi\", \"hi\", \"admin\", \"project\"])\n                == vec![\"hi\", \"admin\"]\n        );\n        assert!(total_match(vec![\"4\"], vec![\"1\", \"2\", \"3\", \"4\", \"5\"]) == vec![\"4\"]);\n        assert!(total_match(vec![\"hi\", \"admin\"], vec![\"hI\", \"Hi\"]) == vec![\"hI\", \"Hi\"]);\n        assert!(total_match(vec![\"hi\", \"admin\"], vec![\"hI\", \"hi\", \"hi\"]) == vec![\"hI\", \"hi\", \"hi\"]);\n        assert!(total_match(vec![\"hi\", \"admin\"], vec![\"hI\", \"hi\", \"hii\"]) == vec![\"hi\", \"admin\"]);\n        assert!(total_match(vec![], vec![\"this\"]) == v_empty);\n        assert!(total_match(vec![\"this\"], vec![]) == v_empty);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/75",
    "instruction": "Write a Rust function `is_multiply_prime(a: i32) -> bool` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.",
    "generated_code": "fn is_multiply_prime(a: i32) -> bool {\n    let mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    let mut count = 0;\n    while i * j * k < a {\n        if i * j * k == a {\n            count += 1;\n        }\n        if i * j < a {\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if i * j * k == a {\n            count += 1;\n        }\n        if j * k < a {\n            k += 1;\n        } else {\n            j += 1;\n        }\n    }\n    if count == 3 {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_multiply_prime() {\n        assert!(is_multiply_prime(5) == false);\n        assert!(is_multiply_prime(30) == true);\n        assert!(is_multiply_prime(8) == true);\n        assert!(is_multiply_prime(10) == false);\n        assert!(is_multiply_prime(125) == true);\n        assert!(is_multiply_prime(3 * 5 * 7) == true);\n        assert!(is_multiply_prime(3 * 6 * 7) == false);\n        assert!(is_multiply_prime(9 * 9 * 9) == false);\n        assert!(is_multiply_prime(11 * 9 * 9) == false);\n        assert!(is_multiply_prime(11 * 13 * 7) == true);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/76",
    "instruction": "Write a Rust function `is_simple_power(x:i32, n:i32) -> bool` to solve the following problem:\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x",
    "generated_code": "fn is_simple_power(x: i32, n: i32) -> bool {\n    x == n.pow(x.log(n) as u32)\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n  #[test]\n    fn test_is_simple_power() {\n        assert!(is_simple_power(1, 4) == true);\n        assert!(is_simple_power(2, 2) == true);\n        assert!(is_simple_power(8, 2) == true);\n        assert!(is_simple_power(3, 2) == false);\n        assert!(is_simple_power(3, 1) == false);\n        assert!(is_simple_power(5, 3) == false);\n        assert!(is_simple_power(16, 2) == true);\n        assert!(is_simple_power(143214, 16) == false);\n        assert!(is_simple_power(4, 2) == true);\n        assert!(is_simple_power(9, 3) == true);\n        assert!(is_simple_power(16, 4) == true);\n        assert!(is_simple_power(24, 2) == false);\n        assert!(is_simple_power(128, 4) == false);\n        assert!(is_simple_power(12, 6) == false);\n        assert!(is_simple_power(1, 1) == true);\n        assert!(is_simple_power(1, 12) == true);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/77",
    "instruction": "Write a Rust function `iscube(a:i32) -> bool` to solve the following problem:\nWrite a function that takes an integer a and returns True\nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.",
    "generated_code": "fn iscube(a:i32) -> bool {\n    let mut i = 1;\n    while i*i*i <= a {\n        if i*i*i == a {\n            return true;\n        }\n        i += 1;\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_iscube() {\n        assert!(iscube(1) == true);\n        assert!(iscube(2) == false);\n        assert!(iscube(-1) == true);\n        assert!(iscube(64) == true);\n        assert!(iscube(180) == false);\n        assert!(iscube(1000) == true);\n        assert!(iscube(0) == true);\n        assert!(iscube(1729) == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/78",
    "instruction": "Write a Rust function `hex_key(num:&str) -> i32` to solve the following problem:\nYou have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.",
    "generated_code": "fn hex_key(num:&str) -> i32 {\n    let mut count = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_hex_key() {\n        assert!(hex_key(\"AB\") == 1);\n        assert!(hex_key(\"1077E\") == 2);\n        assert!(hex_key(\"ABED1A33\") == 4);\n        assert!(hex_key(\"2020\") == 2);\n        assert!(hex_key(\"123456789ABCDEF0\") == 6);\n        assert!(hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12);\n        assert!(hex_key(\"\") == 0);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/79",
    "instruction": "Write a Rust function `decimal_to_binary(decimal:i32) -> String` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_decimal_to_binary() {\n        assert!(decimal_to_binary(0) == \"db0db\".to_string());\n        assert!(decimal_to_binary(32) == \"db100000db\".to_string());\n        assert!(decimal_to_binary(103) == \"db1100111db\".to_string());\n        assert!(decimal_to_binary(15) == \"db1111db\".to_string());\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/80",
    "instruction": "Write a Rust function `is_happy(s:&str) -> bool` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
    "generated_code": "fn is_happy(s:&str) -> bool {\n    let mut seen = HashSet::new();\n    for i in 0..s.len()-2 {\n        let mut three = s[i..i+3].chars();\n        let a = three.next().unwrap();\n        let b = three.next().unwrap();\n        let c = three.next().unwrap();\n        if a == b || a == c || b == c {\n            return false;\n        }\n        seen.insert((a,b,c));\n    }\n    return true;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_happy() {\n        assert!(is_happy(\"a\") == false);\n        assert!(is_happy(\"aa\") == false);\n        assert!(is_happy(\"abcd\") == true);\n        assert!(is_happy(\"aabb\") == false);\n        assert!(is_happy(\"adb\") == true);\n        assert!(is_happy(\"xyy\") == false);\n        assert!(is_happy(\"iopaxpoi\") == true);\n        assert!(is_happy(\"iopaxioi\") == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/81",
    "instruction": "Write a Rust function `numerical_letter_grade(grades:Vec<f64>) -> Vec<String>` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_numerical_letter_grade() {\n        assert!(\n            numerical_letter_grade(vec![4.0, 3.0, 1.7, 2.0, 3.5])\n                == vec![\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n        );\n        assert!(numerical_letter_grade(vec![1.2]) == vec![\"D+\"]);\n        assert!(numerical_letter_grade(vec![0.5]) == vec![\"D-\"]);\n        assert!(numerical_letter_grade(vec![0.0]) == vec![\"E\"]);\n        assert!(\n            numerical_letter_grade(vec![1.0, 0.3, 1.5, 2.8, 3.3])\n                == vec![\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n        );\n        assert!(numerical_letter_grade(vec![0.0, 0.7]) == vec![\"E\", \"D-\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/82",
    "instruction": "Write a Rust function `prime_length(str:&str) -> bool` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise",
    "generated_code": "fn prime_length(str:&str) -> bool {\n    let len = str.len();\n    if len == 1 {\n        return true;\n    }\n    for i in 2..(len as f64).sqrt() as usize + 1 {\n        if len % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_prime_length() {\n        assert!(prime_length(\"Hello\") == true);\n        assert!(prime_length(\"abcdcba\") == true);\n        assert!(prime_length(\"kittens\") == true);\n        assert!(prime_length(\"orange\") == false);\n        assert!(prime_length(\"wow\") == true);\n        assert!(prime_length(\"world\") == true);\n        assert!(prime_length(\"MadaM\") == true);\n        assert!(prime_length(\"Wow\") == true);\n        assert!(prime_length(\"\") == false);\n        assert!(prime_length(\"HI\") == true);\n        assert!(prime_length(\"go\") == true);\n        assert!(prime_length(\"gogo\") == false);\n        assert!(prime_length(\"aaaaaaaaaaaaaaa\") == false);\n        assert!(prime_length(\"Madam\") == true);\n        assert!(prime_length(\"M\") == false);\n        assert!(prime_length(\"0\") == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/83",
    "instruction": "Write a Rust function `starts_one_ends(n:i32) -> i32` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.",
    "generated_code": "fn starts_one_ends(n: i32) -> i32 {\n    let mut count = 0;\n    for i in 1..10i32.pow(n) {\n        if i.to_string().starts_with(\"1\") || i.to_string().ends_with(\"1\") {\n            count += 1;\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_starts_one_ends() {\n        assert!(starts_one_ends(1) == 1);\n        assert!(starts_one_ends(2) == 18);\n        assert!(starts_one_ends(3) == 180);\n        assert!(starts_one_ends(4) == 1800);\n        assert!(starts_one_ends(5) == 18000);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/84",
    "instruction": "Write a Rust function `solve(n:i32) -> String` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nVariables:\n@N integer\nConstraints: 0 ≤ N ≤ 10000.\nOutput:\na string of binary number",
    "generated_code": "fn solve(n: i32) -> String {\n    let mut sum = 0;\n    let mut n = n;\n    while n > 0 {\n        sum += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_solve() {\n        assert!(solve(1000) == \"1\");\n        assert!(solve(150) == \"110\");\n        assert!(solve(147) == \"1100\");\n        assert!(solve(333) == \"1001\");\n        assert!(solve(963) == \"10010\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/85",
    "instruction": "Write a Rust function `add_even_odd(lst: Vec<i32>) -> i32` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..",
    "generated_code": "fn add_even_odd(lst: Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_add_even_odd() {\n        assert!(add_even_odd(vec![4, 88]) == 88);\n        assert!(add_even_odd(vec![4, 5, 6, 7, 2, 122]) == 122);\n        assert!(add_even_odd(vec![4, 0, 6, 7]) == 0);\n        assert!(add_even_odd(vec![4, 4, 6, 8]) == 12);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/86",
    "instruction": "Write a Rust function `anti_shuffle(s:&str) -> String` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.",
    "generated_code": "fn anti_shuffle(s:&str) -> String {\n    let mut words = s.split_whitespace();\n    let mut result = String::new();\n    while let Some(word) = words.next() {\n        let mut chars = word.chars();\n        let mut sorted_chars = Vec::new();\n        while let Some(c) = chars.next() {\n            sorted_chars.push(c);\n        }\n        sorted_chars.sort();\n        result.push_str(&sorted_chars.into_iter().collect::<String>());\n        result.push(' ');\n    }\n    result.pop();\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_anti_shuffle() {\n        assert!(anti_shuffle(\"Hi\") == \"Hi\".to_string());\n        assert!(anti_shuffle(\"hello\") == \"ehllo\".to_string());\n        assert!(anti_shuffle(\"number\") == \"bemnru\".to_string());\n        assert!(anti_shuffle(\"abcd\") == \"abcd\".to_string());\n        assert!(anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\".to_string());\n        assert!(anti_shuffle(\"\") == \"\".to_string());\n        assert!(\n            anti_shuffle(\"Hi. My name is Mister Robot. How are you?\")\n                == \".Hi My aemn is Meirst .Rboot How aer ?ouy\".to_string()\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/87",
    "instruction": "Write a Rust function `get_row(lst:Vec<Vec<i32>>, x:i32) -> Vec<Vec<i32>>` to solve the following problem:\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.",
    "generated_code": "fn get_row(lst: Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut result = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        if row.contains(&x) {\n            result.push(vec![i as i32, row.iter().position(|&r| r == x).unwrap() as i32]);\n        }\n    }\n    result.sort_by(|a, b| a[0].cmp(&b[0]));\n    result.sort_by(|a, b| b[1].cmp(&a[1]));\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_get_row() {\n        assert!(\n            get_row(\n                vec![\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 1, 6],\n                    vec![1, 2, 3, 4, 5, 1]\n                ],\n                1\n            ) == vec![vec![0, 0], vec![1, 0], vec![1, 4], vec![2, 0], vec![2, 5]]\n        );\n        assert!(\n            get_row(\n                vec![\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 5, 6]\n                ],\n                2\n            ) == vec![\n                vec![0, 1],\n                vec![1, 1],\n                vec![2, 1],\n                vec![3, 1],\n                vec![4, 1],\n                vec![5, 1]\n            ]\n        );\n        assert!(\n            get_row(\n                vec![\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 2, 3, 4, 5, 6],\n                    vec![1, 1, 3, 4, 5, 6],\n                    vec![1, 2, 1, 4, 5, 6],\n                    vec![1, 2, 3, 1, 5, 6],\n                    vec![1, 2, 3, 4, 1, 6],\n                    vec![1, 2, 3, 4, 5, 1]\n                ],\n                1\n            ) == vec![\n                vec![0, 0],\n                vec![1, 0],\n                vec![2, 0],\n                vec![2, 1],\n                vec![3, 0],\n                vec![3, 2],\n                vec![4, 0],\n                vec![4, 3],\n                vec![5, 0],\n                vec![5, 4],\n                vec![6, 0],\n                vec![6, 5]\n            ]\n        );\n        let v: Vec<Vec<i32>> = vec![];\n        assert!(get_row(vec![], 1) == v);\n        assert!(get_row(vec![vec![1]], 2) == v);\n        assert!(get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3) == vec![vec![2, 2]]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/88",
    "instruction": "Write a Rust function `sort_array(array:Vec<i32>) -> Vec<i32>` to solve the following problem:\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.",
    "generated_code": "fn sort_array(array:Vec<i32>) -> Vec<i32> {\n    let mut result = array.clone();\n    result.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n  #[test]\n    fn test_sort_array() {\n        assert!(sort_array(vec![]) == vec![]);\n        assert!(sort_array(vec![5]) == vec![5]);\n        assert!(sort_array(vec![2, 4, 3, 0, 1, 5]) == vec![0, 1, 2, 3, 4, 5]);\n        assert!(sort_array(vec![2, 4, 3, 0, 1, 5, 6]) == vec![6, 5, 4, 3, 2, 1, 0]);\n        assert!(sort_array(vec![2, 1]) == vec![1, 2]);\n        assert!(sort_array(vec![15, 42, 87, 32, 11, 0]) == vec![0, 11, 15, 32, 42, 87]);\n        assert!(sort_array(vec![21, 14, 23, 11]) == vec![23, 21, 14, 11]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/89",
    "instruction": "Write a Rust function `encrypt(s:&str) -> String` to solve the following problem:\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated.\nThe alphabet should be rotated in a manner such that the letters\nshift down by two multiplied to two places.",
    "generated_code": "fn encrypt(s: &str) -> String {\n    let mut encrypted = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            let shifted = (c as u8 + 2) % 26;\n            encrypted.push((b'A' + shifted) as char);\n        } else {\n            encrypted.push(c);\n        }\n    }\n    encrypted\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_encrypt() {\n        assert!(encrypt(\"hi\") == \"lm\");\n        assert!(encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n        assert!(encrypt(\"gf\") == \"kj\");\n        assert!(encrypt(\"et\") == \"ix\");\n        assert!(encrypt(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n        assert!(encrypt(\"hellomyfriend\") == \"lippsqcjvmirh\");\n        assert!(\n            encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")\n                == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n        );\n        assert!(encrypt(\"a\") == \"e\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/90",
    "instruction": "Write a Rust function `next_smallest(lst:Vec<i32>) -> i32` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.",
    "generated_code": "fn next_smallest(lst: Vec<i32>) -> i32 {\n    let mut sorted = lst.clone();\n    sorted.sort();\n    if sorted.len() < 2 {\n        return -1;\n    }\n    let mut i = 1;\n    while i < sorted.len() {\n        if sorted[i] != sorted[i - 1] {\n            return sorted[i];\n        }\n        i += 1;\n    }\n    -1\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_next_smallest() {\n        assert!(next_smallest(vec![1, 2, 3, 4, 5]) == 2);\n        assert!(next_smallest(vec![5, 1, 4, 3, 2]) == 2);\n        assert!(next_smallest(vec![]) == -1);\n        assert!(next_smallest(vec![1, 1]) == -1);\n        assert!(next_smallest(vec![1, 1, 1, 1, 0]) == 1);\n        assert!(next_smallest(vec![-35, 34, 12, -45]) == -35);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/91",
    "instruction": "Write a Rust function `is_bored(s:&str) -> i32` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.",
    "generated_code": "fn is_bored(s:&str) -> i32 {\n    let mut bored = 0;\n    let mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n        if word == \"I\" {\n            bored += 1;\n        }\n    }\n    bored\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_bored() {\n        assert!(is_bored(\"Hello world\") == 0);\n        assert!(is_bored(\"Is the sky blue?\") == 0);\n        assert!(is_bored(\"I love It !\") == 1);\n        assert!(is_bored(\"bIt\") == 0);\n        assert!(is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n        assert!(is_bored(\"You and I are going for a walk\") == 0);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/92",
    "instruction": "Write a Rust function `any_int(a:f64, b:f64, c:f64) -> bool` to solve the following problem:\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_any_int() {\n        assert!(any_int(2.0, 3.0, 1.0) == true);\n        assert!(any_int(2.5, 2.0, 3.0) == false);\n        assert!(any_int(1.5, 5.0, 3.5) == false);\n        assert!(any_int(2.0, 6.0, 2.0) == false);\n        assert!(any_int(4.0, 2.0, 2.0) == true);\n        assert!(any_int(2.2, 2.2, 2.2) == false);\n        assert!(any_int(-4.0, 6.0, 2.0) == true);\n        assert!(any_int(2.0, 1.0, 1.0) == true);\n        assert!(any_int(3.0, 4.0, 7.0) == true);\n        assert!(any_int(3.01, 4.0, 7.0) == false);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/93",
    "instruction": "Write a Rust function `encode(message:&str) -> String` to solve the following problem:\nWrite a function that takes a message, and encodes in such a\nway that it swaps case of all letters, replaces all vowels in\nthe message with the letter that appears 2 places ahead of that\nvowel in the english alphabet.\nAssume only letters.",
    "generated_code": "fn encode(message:&str) -> String {\n    let mut result = String::new();\n    for c in message.chars() {\n        let mut new_c = c;\n        if c.is_lowercase() {\n            new_c = c.to_uppercase().next().unwrap();\n        } else if c.is_uppercase() {\n            new_c = c.to_lowercase().next().unwrap();\n        }\n        if c.is_vowel() {\n            new_c = (c as u8 + 2) as char;\n        }\n        result.push(new_c);\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_encode() {\n        assert!(encode(\"TEST\") == \"tgst\");\n        assert!(encode(\"Mudasir\") == \"mWDCSKR\");\n        assert!(encode(\"YES\") == \"ygs\");\n        assert!(encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n        assert!(encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/94",
    "instruction": "Write a Rust function `skjkasdkd(lst:Vec<i32>) -> i32` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.",
    "generated_code": "fn skjkasdkd(lst: Vec<i32>) -> i32 {\n    let mut max_prime = 0;\n    let mut sum_of_digits = 0;\n    for i in lst {\n        if is_prime(i) {\n            if i > max_prime {\n                max_prime = i;\n            }\n        }\n    }\n    for i in max_prime.to_string().chars() {\n        sum_of_digits += i.to_digit(10).unwrap();\n    }\n    sum_of_digits\n}\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_skjkasdkd() {\n        assert!(\n            skjkasdkd(vec![\n                0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3\n            ]) == 10\n        );\n        assert!(\n            skjkasdkd(vec![\n                1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1\n            ]) == 25\n        );\n        assert!(\n            skjkasdkd(vec![\n                1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3\n            ]) == 13\n        );\n        assert!(skjkasdkd(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11);\n        assert!(skjkasdkd(vec![0, 81, 12, 3, 1, 21]) == 3);\n        assert!(skjkasdkd(vec![0, 8, 1, 2, 1, 7]) == 7);\n        assert!(skjkasdkd(vec![8191]) == 19);\n        assert!(skjkasdkd(vec![8191, 123456, 127, 7]) == 19);\n        assert!(skjkasdkd(vec![127, 97, 8192]) == 10);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/95",
    "instruction": "Write a Rust function `check_dict_case(dict:HashMap<&str, &str>) -> bool` to solve the following problem:\nGiven a dictionary, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_check_dict_case() {\n        assert!(check_dict_case(HashMap::from([(\"p\", \"pineapple\"), (\"b\", \"banana\")])) == true);\n        assert!(\n            check_dict_case(HashMap::from([\n                (\"p\", \"pineapple\"),\n                (\"A\", \"banana\"),\n                (\"B\", \"banana\")\n            ])) == false\n        );\n        assert!(\n            check_dict_case(HashMap::from([\n                (\"p\", \"pineapple\"),\n                (\"5\", \"banana\"),\n                (\"a\", \"apple\")\n            ])) == false\n        );\n        assert!(\n            check_dict_case(HashMap::from([\n                (\"Name\", \"John\"),\n                (\"Age\", \"36\"),\n                (\"City\", \"Houston\")\n            ])) == false\n        );\n        assert!(check_dict_case(HashMap::from([(\"STATE\", \"NC\"), (\"ZIP\", \"12345\")])) == true);\n        assert!(check_dict_case(HashMap::from([(\"fruit\", \"Orange\"), (\"taste\", \"Sweet\")])) == true);\n        assert!(check_dict_case(HashMap::new()) == false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/96",
    "instruction": "Write a Rust function `count_up_to(n:i32) -> Vec<i32>` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.",
    "generated_code": "fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for i in 2..n {\n        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n    primes\n}\n\nfn is_prime(n: i32) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_count_up_to() {\n        assert!(count_up_to(5) == vec![2, 3]);\n        assert!(count_up_to(6) == vec![2, 3, 5]);\n        assert!(count_up_to(7) == vec![2, 3, 5]);\n        assert!(count_up_to(10) == vec![2, 3, 5, 7]);\n        assert!(count_up_to(0) == vec![]);\n        assert!(count_up_to(22) == vec![2, 3, 5, 7, 11, 13, 17, 19]);\n        assert!(count_up_to(1) == vec![]);\n        assert!(count_up_to(18) == vec![2, 3, 5, 7, 11, 13, 17]);\n        assert!(count_up_to(47) == vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n        assert!(\n            count_up_to(101)\n                == vec![\n                    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\n                    79, 83, 89, 97\n                ]\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/97",
    "instruction": "Write a Rust function `multiply(a:i32, b:i32) -> i32` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.",
    "generated_code": "fn multiply(a: i32, b: i32) -> i32 {\n    let mut result = 0;\n    let mut a = a;\n    let mut b = b;\n    while a > 0 {\n        result += b;\n        a -= 1;\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_multiply() {\n        assert!(multiply(148, 412) == 16);\n        assert!(multiply(19, 28) == 72);\n        assert!(multiply(2020, 1851) == 0);\n        assert!(multiply(14, -15) == 20);\n        assert!(multiply(76, 67) == 42);\n        assert!(multiply(17, 27) == 49);\n        assert!(multiply(0, 1) == 0);\n        assert!(multiply(0, 0) == 0);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/98",
    "instruction": "Write a Rust function `count_upper(s:&str) -> i32` to solve the following problem:\nGiven a string s, count the number of uppercase vowels in even indices.",
    "generated_code": "fn count_upper(s:&str) -> i32 {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() && c.is_alphabetic() {\n            count += 1;\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_count_upper() {\n        assert!(count_upper(\"aBCdEf\") == 1);\n        assert!(count_upper(\"abcdefg\") == 0);\n        assert!(count_upper(\"dBBE\") == 0);\n        assert!(count_upper(\"B\") == 0);\n        assert!(count_upper(\"U\") == 1);\n        assert!(count_upper(\"\") == 0);\n        assert!(count_upper(\"EEEE\") == 2);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/99",
    "instruction": "Write a Rust function `closest_integer(value:&str) -> i32` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_closest_integer() {\n        assert!(closest_integer(\"10\") == 10);\n        assert!(closest_integer(\"14.5\") == 15);\n        assert!(closest_integer(\"-15.5\") == -16);\n        assert!(closest_integer(\"15.3\") == 15);\n        assert!(closest_integer(\"0\") == 0);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/100",
    "instruction": "Write a Rust function `make_a_pile(n:i32) -> Vec<i32>` to solve the following problem:\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).",
    "generated_code": "fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut pile = vec![n];\n    while pile.last().unwrap() > &1 {\n        let next = if pile.last().unwrap() % 2 == 0 {\n            pile.last().unwrap() / 2\n        } else {\n            pile.last().unwrap() * 3 + 1\n        };\n        pile.push(next);\n    }\n    pile\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_make_a_pile() {\n        assert!(make_a_pile(3) == vec![3, 5, 7]);\n        assert!(make_a_pile(4) == vec![4, 6, 8, 10]);\n        assert!(make_a_pile(5) == vec![5, 7, 9, 11, 13]);\n        assert!(make_a_pile(6) == vec![6, 8, 10, 12, 14, 16]);\n        assert!(make_a_pile(8) == vec![8, 10, 12, 14, 16, 18, 20, 22]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/101",
    "instruction": "Write a Rust function `words_string(s:&str) -> Vec<String>` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.",
    "generated_code": "fn words_string(s:&str) -> Vec<String> {\n    s.split(|c| c == ',' || c == ' ').map(|w| w.to_string()).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_words_string() {\n        assert!(words_string(\"Hi, my name is John\") == vec![\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n        assert!(\n            words_string(\"One, two, three, four, five, six\")\n                == vec![\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        );\n        assert!(words_string(\"Hi, my name\") == vec![\"Hi\", \"my\", \"name\"]);\n        assert!(\n            words_string(\"One,, two, three, four, five, six,\")\n                == vec![\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        );\n        let v_empty: Vec<String> = vec![];\n        assert!(words_string(\"\") == v_empty);\n        assert!(words_string(\"ahmed , gamal\") == vec![\"ahmed\", \"gamal\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/102",
    "instruction": "Write a Rust function `choose_num(x:i32, y:i32) -> i32` to solve the following problem:\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.",
    "generated_code": "fn choose_num(x: i32, y: i32) -> i32 {\n    let mut max = -1;\n    for i in x..=y {\n        if i % 2 == 0 {\n            max = i;\n        }\n    }\n    max\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_choose_num() {\n        assert!(choose_num(12, 15) == 14);\n        assert!(choose_num(13, 12) == -1);\n        assert!(choose_num(33, 12354) == 12354);\n        assert!(choose_num(6, 29) == 28);\n        assert!(choose_num(27, 10) == -1);\n        assert!(choose_num(7, 7) == -1);\n        assert!(choose_num(546, 546) == 546);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/103",
    "instruction": "Write a Rust function `rounded_avg(n:i32, m:i32) -> String` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.",
    "generated_code": "fn rounded_avg(n:i32, m:i32) -> String {\n    if n > m {\n        return \"-1\".to_string();\n    }\n    let sum = (n..=m).sum::<i32>();\n    let avg = sum / (m - n + 1);\n    let rounded = avg.round() as i32;\n    format!(\"{:b}\", rounded)\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_rounded_avg() {\n        assert!(rounded_avg(1, 5) == \"11\");\n        assert!(rounded_avg(7, 13) == \"1010\");\n        assert!(rounded_avg(964, 977) == \"1111001010\");\n        assert!(rounded_avg(996, 997) == \"1111100100\");\n        assert!(rounded_avg(560, 851) == \"1011000001\");\n        assert!(rounded_avg(185, 546) == \"101101101\");\n        assert!(rounded_avg(362, 496) == \"110101101\");\n        assert!(rounded_avg(350, 902) == \"1001110010\");\n        assert!(rounded_avg(197, 233) == \"11010111\");\n        assert!(rounded_avg(7, 5) == \"-1\");\n        assert!(rounded_avg(5, 1) == \"-1\");\n        assert!(rounded_avg(5, 5) == \"101\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/104",
    "instruction": "Write a Rust function `unique_digits(x:Vec<i32>) -> Vec<i32>` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.",
    "generated_code": "fn unique_digits(x: Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n        while num > 0 {\n            if num % 10 == 0 {\n                has_even = true;\n                break;\n            }\n            num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_unique_digits() {\n        assert!(unique_digits(vec![15, 33, 1422, 1]) == vec![1, 15, 33]);\n        assert!(unique_digits(vec![152, 323, 1422, 10]) == vec![]);\n        assert!(unique_digits(vec![12345, 2033, 111, 151]) == vec![111, 151]);\n        assert!(unique_digits(vec![135, 103, 31]) == vec![31, 135]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/105",
    "instruction": "Write a Rust function `by_length(arr:Vec<i32>) -> Vec<String>` to solve the following problem:\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
    "generated_code": "fn by_length(arr:Vec<i32>) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.push(i.to_string());\n        }\n    }\n    result.sort();\n    result.reverse();\n    let mut result2 = Vec::new();\n    for i in result {\n        match i {\n            1 => result2.push(\"One\".to_string()),\n            2 => result2.push(\"Two\".to_string()),\n            3 => result2.push(\"Three\".to_string()),\n            4 => result2.push(\"Four\".to_string()),\n            5 => result2.push(\"Five\".to_string()),\n            6 => result2.push(\"Six\".to_string()),\n            7 => result2.push(\"Seven\".to_string()),\n            8 => result2.push(\"Eight\".to_string()),\n            9 => result2.push(\"Nine\".to_string()),\n            _ => result2.push(\"\".to_string()),\n        }\n    }\n    result2\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_by_length() {\n        assert!(\n            by_length(vec![2, 1, 1, 4, 5, 8, 2, 3])\n                == vec![\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        );\n        let v_empty: Vec<String> = vec![];\n        assert!(by_length(vec![]) == v_empty);\n        assert!(by_length(vec![1, -1, 55]) == vec![\"One\"]);\n        assert!(by_length(vec![1, -1, 3, 2]) == vec![\"Three\", \"Two\", \"One\"]);\n        assert!(by_length(vec![9, 4, 8]) == vec![\"Nine\", \"Eight\", \"Four\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/106",
    "instruction": "Write a Rust function `f(n:i32) -> Vec<i32>` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
    "generated_code": "fn f(n: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..n+1 {\n        if i % 2 == 0 {\n            result.push(i);\n        } else {\n            let mut sum = 0;\n            for j in 1..i+1 {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_f() {\n        assert!(f(5) == vec![1, 2, 6, 24, 15]);\n        assert!(f(7) == vec![1, 2, 6, 24, 15, 720, 28]);\n        assert!(f(1) == vec![1]);\n        assert!(f(3) == vec![1, 2, 6]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/107",
    "instruction": "Write a Rust function `even_odd_palindrome(n: i32) -> (i32, i32)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.",
    "generated_code": "fn even_odd_palindrome(n: i32) -> (i32, i32) {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..n+1 {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n        }\n    }\n    (even, odd)\n}\n\nfn is_palindrome(n: i32) -> bool {\n    let mut n = n;\n    let mut rev = 0;\n    while n > 0 {\n        rev = rev * 10 + n % 10;\n        n /= 10;\n    }\n    n == rev\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_even_odd_palindrome() {\n        assert!(even_odd_palindrome(123) == (8, 13));\n        assert!(even_odd_palindrome(12) == (4, 6));\n        assert!(even_odd_palindrome(3) == (1, 2));\n        assert!(even_odd_palindrome(63) == (6, 8));\n        assert!(even_odd_palindrome(25) == (5, 6));\n        assert!(even_odd_palindrome(19) == (4, 6));\n        assert!(even_odd_palindrome(9) == (4, 5));\n        assert!(even_odd_palindrome(1) == (0, 1));\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/108",
    "instruction": "Write a Rust function `count_nums(n:Vec<i32>) -> i32` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.",
    "generated_code": "fn count_nums(n:Vec<i32>) -> i32 {\n    let mut count = 0;\n    for i in n {\n        let mut sum = 0;\n        let mut num = i;\n        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_count_nums() {\n        assert!(count_nums(vec![]) == 0);\n        assert!(count_nums(vec![-1, -2, 0]) == 0);\n        assert!(count_nums(vec![1, 1, 2, -2, 3, 4, 5]) == 6);\n        assert!(count_nums(vec![1, 6, 9, -6, 0, 1, 5]) == 5);\n        assert!(count_nums(vec![1, 100, 98, -7, 1, -1]) == 4);\n        assert!(count_nums(vec![12, 23, 34, -45, -56, 0]) == 5);\n        assert!(count_nums(vec![-0, 1]) == 1);\n        assert!(count_nums(vec![1]) == 1);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/109",
    "instruction": "Write a Rust function `move_one_ball(arr:Vec<i32>) -> bool` to solve the following problem:\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\nNote: The given list is guaranteed to have unique elements.",
    "generated_code": "fn move_one_ball(arr: Vec<i32>) -> bool {\n    let mut arr = arr;\n    let mut count = 0;\n    while arr.len() > 1 {\n        let mut i = 0;\n        while i < arr.len() - 1 {\n            if arr[i] > arr[i + 1] {\n                arr.swap(i, i + 1);\n                count += 1;\n            }\n            i += 1;\n        }\n        arr.pop();\n    }\n    count == 0\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_move_one_ball() {\n        assert!(move_one_ball(vec![3, 4, 5, 1, 2]) == true);\n        assert!(move_one_ball(vec![3, 5, 10, 1, 2]) == true);\n        assert!(move_one_ball(vec![4, 3, 1, 2]) == false);\n        assert!(move_one_ball(vec![3, 5, 4, 1, 2]) == false);\n        assert!(move_one_ball(vec![]) == true);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/110",
    "instruction": "Write a Rust function `exchange(lst1:Vec<i32>, lst2:Vec<i32>) -> String` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nIt is assumed that the input lists will be non-empty.",
    "generated_code": "fn exchange(lst1: Vec<i32>, lst2: Vec<i32>) -> String {\n    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut count = 0;\n    while lst1.len() > 0 {\n        if lst1[0] % 2 == 0 {\n            lst1.remove(0);\n        } else {\n            if lst2.len() > 0 {\n                lst1[0] = lst2[0];\n                lst2.remove(0);\n                count += 1;\n            } else {\n                return \"NO\".to_string();\n            }\n        }\n    }\n    if count % 2 == 0 {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_exchange() {\n        assert!(exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4]) == \"YES\");\n        assert!(exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4]) == \"NO\");\n        assert!(exchange(vec![1, 2, 3, 4], vec![2, 1, 4, 3]) == \"YES\");\n        assert!(exchange(vec![5, 7, 3], vec![2, 6, 4]) == \"YES\");\n        assert!(exchange(vec![5, 7, 3], vec![2, 6, 3]) == \"NO\");\n        assert!(exchange(vec![3, 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]) == \"NO\");\n        assert!(exchange(vec![100, 200], vec![200, 200]) == \"YES\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/111",
    "instruction": "Write a Rust function `histogram(test:&str) -> HashMap<char, i32>` to solve the following problem:\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.",
    "generated_code": "fn histogram(test:&str) -> HashMap<char, i32> {\n    let mut map = HashMap::new();\n    for c in test.chars() {\n        if c.is_alphabetic() {\n            let count = map.entry(c).or_insert(0);\n            *count += 1;\n        }\n    }\n    map\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_histogram() {\n        assert!(histogram(\"a b b a\") == HashMap::from([('a', 2), ('b', 2)]));\n        assert!(histogram(\"a b c a b\") == HashMap::from([('a', 2), ('b', 2)]));\n        assert!(\n            histogram(\"a b c d g\")\n                == HashMap::from([('a', 1), ('b', 1), ('c', 1), ('d', 1), ('g', 1)])\n        );\n        assert!(histogram(\"r t g\") == HashMap::from([('r', 1), ('t', 1), ('g', 1)]));\n        assert!(histogram(\"b b b b a\") == HashMap::from([('b', 4)]));\n        assert!(histogram(\"r t g\") == HashMap::from([('r', 1), ('t', 1), ('g', 1)]));\n        assert!(histogram(\"\") == HashMap::new());\n        assert!(histogram(\"a\") == HashMap::from([(('a', 1))]));\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/112",
    "instruction": "Write a Rust function `reverse_delete(s:&str, c:&str) -> Vec<String>` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.",
    "generated_code": "fn reverse_delete(s:&str, c:&str) -> Vec<String> {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if !c.contains(ch) {\n            result.push(ch);\n        }\n    }\n    let mut rev = String::new();\n    for ch in result.chars().rev() {\n        rev.push(ch);\n    }\n    vec![result, rev]\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_reverse_delete() {\n        assert!(reverse_delete(\"abcde\", \"ae\") == [\"bcd\", \"False\"]);\n        assert!(reverse_delete(\"abcdef\", \"b\") == [\"acdef\", \"False\"]);\n        assert!(reverse_delete(\"abcdedcba\", \"ab\") == [\"cdedc\", \"True\"]);\n        assert!(reverse_delete(\"dwik\", \"w\") == [\"dik\", \"False\"]);\n        assert!(reverse_delete(\"a\", \"a\") == [\"\", \"True\"]);\n        assert!(reverse_delete(\"abcdedcba\", \"\") == [\"abcdedcba\", \"True\"]);\n        assert!(reverse_delete(\"abcdedcba\", \"v\") == [\"abcdedcba\", \"True\"]);\n        assert!(reverse_delete(\"vabba\", \"v\") == [\"abba\", \"True\"]);\n        assert!(reverse_delete(\"mamma\", \"mia\") == [\"\", \"True\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/113",
    "instruction": "Write a Rust function `odd_count(lst:Vec<&str>) -> Vec<String>` to solve the following problem:\nGiven a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.",
    "generated_code": "fn odd_count(lst: Vec<&str>) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in lst {\n        let mut odd = 0;\n        for c in s.chars() {\n            if c == '1' || c == '3' || c == '5' || c == '7' || c == '9' {\n                odd += 1;\n            }\n        }\n        res.push(odd.to_string());\n    }\n    res\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_odd_count() {\n        assert!(\n            odd_count(vec![\"1234567\"])\n                == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        );\n        assert!(\n            odd_count(vec![\"3\", \"11111111\"])\n                == [\n                    \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n                    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n                ]\n        );\n        assert!(\n            odd_count(vec![\"271\", \"137\", \"314\"])\n                == [\n                    \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                    \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                    \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                ]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/114",
    "instruction": "Write a Rust function `min_sub_array_sum(nums: Vec<i64>) -> i64` to solve the following problem:\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_min_sub_array_sum() {\n        assert!(min_sub_array_sum(vec![2, 3, 4, 1, 2, 4]) == 1);\n        assert!(min_sub_array_sum(vec![-1, -2, -3]) == -6);\n        assert!(min_sub_array_sum(vec![-1, -2, -3, 2, -10]) == -14);\n        assert!(min_sub_array_sum(vec![-9999999999999999]) == -9999999999999999);\n        assert!(min_sub_array_sum(vec![0, 10, 20, 1000000]) == 0);\n        assert!(min_sub_array_sum(vec![-1, -2, -3, 10, -5]) == -6);\n        assert!(min_sub_array_sum(vec![100, -1, -2, -3, 10, -5]) == -6);\n        assert!(min_sub_array_sum(vec![10, 11, 13, 8, 3, 4]) == 3);\n        assert!(min_sub_array_sum(vec![100, -33, 32, -1, 0, -2]) == -33);\n        assert!(min_sub_array_sum(vec![-10]) == -10);\n        assert!(min_sub_array_sum(vec![7]) == 7);\n        assert!(min_sub_array_sum(vec![1, -1]) == -1);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/115",
    "instruction": "Write a Rust function `max_fill(grid:Vec<Vec<i32>>, capacity:i32) -> i32` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_max_fill() {\n        assert!(\n            max_fill(\n                vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]],\n                1\n            ) == 6\n        );\n        assert!(\n            max_fill(\n                vec![\n                    vec![0, 0, 1, 1],\n                    vec![0, 0, 0, 0],\n                    vec![1, 1, 1, 1],\n                    vec![0, 1, 1, 1]\n                ],\n                2\n            ) == 5\n        );\n        assert!(max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5) == 0);\n        assert!(max_fill(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 2) == 4);\n        assert!(max_fill(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 9) == 2);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/116",
    "instruction": "Write a Rust function `sort_array_1(arr:Vec<i32>) -> Vec<i32>` to solve the following problem:\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_sort_array_1() {\n        assert!(sort_array_1(vec![1, 5, 2, 3, 4]) == vec![1, 2, 4, 3, 5]);\n        assert!(sort_array_1(vec![-2, -3, -4, -5, -6]) == vec![-4, -2, -6, -5, -3]);\n        assert!(sort_array_1(vec![1, 0, 2, 3, 4]) == vec![0, 1, 2, 4, 3]);\n        assert!(sort_array_1(vec![]) == vec![]);\n        assert!(\n            sort_array_1(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\n                == vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n        );\n        assert!(sort_array_1(vec![3, 6, 44, 12, 32, 5]) == vec![32, 3, 5, 6, 12, 44]);\n        assert!(sort_array_1(vec![2, 4, 8, 16, 32]) == vec![2, 4, 8, 16, 32]);\n        assert!(sort_array_1(vec![2, 4, 8, 16, 32]) == vec![2, 4, 8, 16, 32]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/117",
    "instruction": "Write a Rust function `select_words(s:&str, n:i32) -> Vec<String>` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.",
    "generated_code": "fn select_words(s:&str, n:i32) -> Vec<String> {\n    let mut words: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    let mut consonants: i32 = 0;\n    let mut vowels: i32 = 0;\n    let mut is_vowel: bool = false;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels += 1;\n            is_vowel = true;\n        } else {\n            consonants += 1;\n            is_vowel = false;\n        }\n        if c == ' ' {\n            if consonants == n {\n                words.push(word.clone());\n            }\n            word = String::new();\n            consonants = 0;\n            vowels = 0;\n        } else {\n            word.push(c);\n        }\n    }\n    if consonants == n {\n        words.push(word.clone());\n    }\n    words\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_select_words() {\n        assert_eq!(select_words(\"Mary had a little lamb\", 4), vec![\"little\"]);\n        assert_eq!(\n            select_words(\"Mary had a little lamb\", 3),\n            vec![\"Mary\", \"lamb\"]\n        );\n        let v_empty: Vec<&str> = vec![];\n        assert_eq!(select_words(\"simple white space\", 2), v_empty);\n        assert_eq!(select_words(\"Hello world\", 4), vec![\"world\"]);\n        assert_eq!(select_words(\"Uncle sam\", 3), vec![\"Uncle\"]);\n        assert_eq!(select_words(\"\", 4), v_empty);\n        assert_eq!(select_words(\"a b c d e f\", 1), vec![\"b\", \"c\", \"d\", \"f\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/118",
    "instruction": "Write a Rust function `get_closest_vowel(word: &str) -> String` to solve the following problem:\nYou are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\nYou may assume that the given string contains English letter only.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_get_closest_vowel() {\n        assert_eq!(get_closest_vowel(\"yogurt\"), \"u\");\n        assert_eq!(get_closest_vowel(\"full\"), \"u\");\n        assert_eq!(get_closest_vowel(\"easy\"), \"\");\n        assert_eq!(get_closest_vowel(\"eAsy\"), \"\");\n        assert_eq!(get_closest_vowel(\"ali\"), \"\");\n        assert_eq!(get_closest_vowel(\"bad\"), \"a\");\n        assert_eq!(get_closest_vowel(\"most\"), \"o\");\n        assert_eq!(get_closest_vowel(\"ab\"), \"\");\n        assert_eq!(get_closest_vowel(\"ba\"), \"\");\n        assert_eq!(get_closest_vowel(\"quick\"), \"\");\n        assert_eq!(get_closest_vowel(\"anime\"), \"i\");\n        assert_eq!(get_closest_vowel(\"Asia\"), \"\");\n        assert_eq!(get_closest_vowel(\"Above\"), \"o\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/119",
    "instruction": "Write a Rust function `match_parens(lst: Vec<&str>) -> &str` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_match_parens() {\n        assert_eq!(match_parens(vec![\"()(\", \")\"]), \"Yes\");\n        assert_eq!(match_parens(vec![\")\", \")\"]), \"No\");\n        assert_eq!(match_parens(vec![\"(()(())\", \"())())\"],), \"No\");\n        assert_eq!(match_parens(vec![\")())\", \"(()()(\"]), \"Yes\");\n        assert_eq!(match_parens(vec![\"(())))\", \"(()())((\"]), \"Yes\");\n        assert_eq!(match_parens(vec![\"()\", \"())\"],), \"No\");\n        assert_eq!(match_parens(vec![\"(()(\", \"()))()\"]), \"Yes\");\n        assert_eq!(match_parens(vec![\"((((\", \"((())\"],), \"No\");\n        assert_eq!(match_parens(vec![\")(()\", \"(()(\"]), \"No\");\n        assert_eq!(match_parens(vec![\")(\", \")(\"]), \"No\");\n        assert_eq!(match_parens(vec![\"(\", \")\"]), \"Yes\");\n        assert_eq!(match_parens(vec![\")\", \"(\"]), \"Yes\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/120",
    "instruction": "Write a Rust function `maximum_120(arr: Vec<i32>, k: i32) -> Vec<i32>` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)",
    "generated_code": "fn maximum_120(arr: Vec<i32>, k: i32) -> Vec<i32> {\n    let mut arr = arr;\n    arr.sort();\n    arr.reverse();\n    arr.truncate(k as usize);\n    arr\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_maximum_120() {\n        assert_eq!(maximum_120(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n        assert_eq!(maximum_120(vec![4, -4, 4], 2), vec![4, 4]);\n        assert_eq!(maximum_120(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n        assert_eq!(\n            maximum_120(vec![123, -123, 20, 0, 1, 2, -3], 3),\n            vec![2, 20, 123]\n        );\n        assert_eq!(\n            maximum_120(vec![-123, 20, 0, 1, 2, -3], 4),\n            vec![0, 1, 2, 20]\n        );\n        assert_eq!(\n            maximum_120(vec![5, 15, 0, 3, -13, -8, 0], 7),\n            vec![-13, -8, 0, 0, 3, 5, 15]\n        );\n        assert_eq!(maximum_120(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n        assert_eq!(maximum_120(vec![1, 0, 5, -7], 1), vec![5]);\n        assert_eq!(maximum_120(vec![4, -4], 2), vec![-4, 4]);\n        assert_eq!(maximum_120(vec![-10, 10], 2), vec![-10, 10]);\n        assert_eq!(maximum_120(vec![1, 2, 3, -23, 243, -400, 0], 0), vec![]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/121",
    "instruction": "Write a Rust function `solutions(lst: Vec<i32>) -> i32` to solve the following problem:\nGiven a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
    "generated_code": "fn solutions(lst: Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_solutions() {\n        assert_eq!(solutions(vec![5, 8, 7, 1]), 12);\n        assert_eq!(solutions(vec![3, 3, 3, 3, 3]), 9);\n        assert_eq!(solutions(vec![30, 13, 24, 321]), 0);\n        assert_eq!(solutions(vec![5, 9]), 5);\n        assert_eq!(solutions(vec![2, 4, 8]), 0);\n        assert_eq!(solutions(vec![30, 13, 23, 32]), 23);\n        assert_eq!(solutions(vec![3, 13, 2, 9]), 3);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/122",
    "instruction": "Write a Rust function `add_elements(arr: Vec<i32>, k: i32) -> i32` to solve the following problem:\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)",
    "generated_code": "fn add_elements(arr: Vec<i32>, k: i32) -> i32 {\n    let mut sum = 0;\n    for i in 0..k as usize {\n        sum += arr[i];\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_add_elements() {\n        assert_eq!(add_elements(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n        assert_eq!(add_elements(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n        assert_eq!(add_elements(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n        assert_eq!(add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n        assert_eq!(add_elements(vec![1], 1), 1);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/123",
    "instruction": "Write a Rust function `get_odd_collatz(n: i32) -> Vec<i32>` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.",
    "generated_code": "fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut res = vec![];\n    let mut cur = n;\n    while cur > 1 {\n        if cur % 2 == 1 {\n            res.push(cur);\n        }\n        if cur % 2 == 0 {\n            cur /= 2;\n        } else {\n            cur = 3 * cur + 1;\n        }\n    }\n    res.sort();\n    res\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n   #[test]\n    fn test_get_odd_collatz() {\n        assert_eq!(get_odd_collatz(14), vec![1, 5, 7, 11, 13, 17]);\n        assert_eq!(get_odd_collatz(5), vec![1, 5]);\n        assert_eq!(get_odd_collatz(12), vec![1, 3, 5]);\n        assert_eq!(get_odd_collatz(1), vec![1]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/124",
    "instruction": "Write a Rust function `valid_date(date: &str) -> bool` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_valid_date() {\n        assert_eq!(valid_date(\"03-11-2000\"), true);\n        assert_eq!(valid_date(\"15-01-2012\"), false);\n        assert_eq!(valid_date(\"04-0-2040\"), false);\n        assert_eq!(valid_date(\"06-04-2020\"), true);\n        assert_eq!(valid_date(\"01-01-2007\"), true);\n        assert_eq!(valid_date(\"03-32-2011\"), false);\n        assert_eq!(valid_date(\"\"), false);\n        assert_eq!(valid_date(\"04-31-3000\"), false);\n        assert_eq!(valid_date(\"06-06-2005\"), true);\n        assert_eq!(valid_date(\"21-31-2000\"), false);\n        assert_eq!(valid_date(\"04-12-2003\"), true);\n        assert_eq!(valid_date(\"04122003\"), false);\n        assert_eq!(valid_date(\"20030412\"), false);\n        assert_eq!(valid_date(\"2003-04\"), false);\n        assert_eq!(valid_date(\"2003-04-12\"), false);\n        assert_eq!(valid_date(\"04-2003\"), false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/125",
    "instruction": "Write a Rust function `split_words(txt: &str) -> Vec<String>` to solve the following problem:\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_split_words() {\n        assert_eq!(split_words(\"Hello world!\"), vec![\"Hello\", \"world!\"]);\n        assert_eq!(split_words(\"Hello,world!\"), vec![\"Hello\", \"world!\"]);\n        assert_eq!(split_words(\"Hello world,!\"), vec![\"Hello\", \"world,!\"]);\n        assert_eq!(\n            split_words(\"Hello,Hello,world !\"),\n            vec![\"Hello,Hello,world\", \"!\"]\n        );\n        assert_eq!(split_words(\"abcdef\"), vec![\"3\"]);\n        assert_eq!(split_words(\"aaabb\"), vec![\"2\"]);\n        assert_eq!(split_words(\"aaaBb\"), vec![\"1\"]);\n        assert_eq!(split_words(\"\"), vec![\"0\"]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/126",
    "instruction": "Write a Rust function `is_sorted(lst: Vec<i32>) -> bool` to solve the following problem:\nGiven a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.",
    "generated_code": "fn is_sorted(lst: Vec<i32>) -> bool {\n    let mut sorted = true;\n    for i in 0..lst.len() - 1 {\n        if lst[i] > lst[i + 1] {\n            sorted = false;\n            break;\n        }\n    }\n    sorted\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_sorted() {\n        assert_eq!(is_sorted(vec![5]), true);\n        assert_eq!(is_sorted(vec![1, 2, 3, 4, 5]), true);\n        assert_eq!(is_sorted(vec![1, 3, 2, 4, 5]), false);\n        assert_eq!(is_sorted(vec![1, 2, 3, 4, 5, 6]), true);\n        assert_eq!(is_sorted(vec![1, 2, 3, 4, 5, 6, 7]), true);\n        assert_eq!(is_sorted(vec![1, 3, 2, 4, 5, 6, 7]), false);\n        assert_eq!(is_sorted(vec![]), true);\n        assert_eq!(is_sorted(vec![1]), true);\n        assert_eq!(is_sorted(vec![3, 2, 1]), false);\n        assert_eq!(is_sorted(vec![1, 2, 2, 2, 3, 4]), false);\n        assert_eq!(is_sorted(vec![1, 2, 3, 3, 3, 4]), false);\n        assert_eq!(is_sorted(vec![1, 2, 2, 3, 3, 4]), true);\n        assert_eq!(is_sorted(vec![1, 2, 3, 4]), true);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/127",
    "instruction": "Write a Rust function `intersection(interval1: Vec<i32>, interval2: Vec<i32>) -> String` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_intersection() {\n        assert_eq!(intersection(vec![1, 2], vec![2, 3]), \"NO\");\n        assert_eq!(intersection(vec![-1, 1], vec![0, 4]), \"NO\");\n        assert_eq!(intersection(vec![-3, -1], vec![-5, 5]), \"YES\");\n        assert_eq!(intersection(vec![-2, 2], vec![-4, 0]), \"YES\");\n        assert_eq!(intersection(vec![-11, 2], vec![-1, -1]), \"NO\");\n        assert_eq!(intersection(vec![1, 2], vec![3, 5]), \"NO\");\n        assert_eq!(intersection(vec![1, 2], vec![1, 2]), \"NO\");\n        assert_eq!(intersection(vec![-2, -2], vec![-3, -2]), \"NO\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/128",
    "instruction": "Write a Rust function `prod_signs(arr: Vec<i32>) -> i32` to solve the following problem:\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.",
    "generated_code": "fn prod_signs(arr: Vec<i32>) -> i32 {\n    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n            sum += i;\n        } else if i < 0 {\n            prod *= -1;\n            sum += i;\n        }\n    }\n    prod * sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_prod_signs() {\n        assert_eq!(prod_signs(vec![1, 2, 2, -4]), -9);\n        assert_eq!(prod_signs(vec![0, 1]), 0);\n        assert_eq!(prod_signs(vec![1, 1, 1, 2, 3, -1, 1]), -10);\n        assert_eq!(prod_signs(vec![]), -32768);\n        assert_eq!(prod_signs(vec![2, 4, 1, 2, -1, -1, 9]), 20);\n        assert_eq!(prod_signs(vec![-1, 1, -1, 1]), 4);\n        assert_eq!(prod_signs(vec![-1, 1, 1, 1]), -4);\n        assert_eq!(prod_signs(vec![-1, 1, 1, 0]), 0);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/129",
    "instruction": "Write a Rust function `min_path(grid: Vec<Vec<i32>>, k: i32) -> Vec<i32>` to solve the following problem:\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.",
    "generated_code": "fn min_path(grid: Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    // your code here\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_min_path() {\n        assert_eq!(\n            min_path(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3),\n            vec![1, 2, 1]\n        );\n        assert_eq!(\n            min_path(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1),\n            vec![1]\n        );\n        assert_eq!(\n            min_path(\n                vec![\n                    vec![1, 2, 3, 4],\n                    vec![5, 6, 7, 8],\n                    vec![9, 10, 11, 12],\n                    vec![13, 14, 15, 16]\n                ],\n                4\n            ),\n            vec![1, 2, 1, 2]\n        );\n        assert_eq!(\n            min_path(\n                vec![\n                    vec![6, 4, 13, 10],\n                    vec![5, 7, 12, 1],\n                    vec![3, 16, 11, 15],\n                    vec![8, 14, 9, 2]\n                ],\n                7\n            ),\n            vec![1, 10, 1, 10, 1, 10, 1]\n        );\n        assert_eq!(\n            min_path(\n                vec![\n                    vec![8, 14, 9, 2],\n                    vec![6, 4, 13, 15],\n                    vec![5, 7, 1, 12],\n                    vec![3, 10, 11, 16]\n                ],\n                5\n            ),\n            vec![1, 7, 1, 7, 1]\n        );\n        assert_eq!(\n            min_path(\n                vec![\n                    vec![11, 8, 7, 2],\n                    vec![5, 16, 14, 4],\n                    vec![9, 3, 15, 6],\n                    vec![12, 13, 10, 1]\n                ],\n                9\n            ),\n            vec![1, 6, 1, 6, 1, 6, 1, 6, 1]\n        );\n        assert_eq!(\n            min_path(\n                vec![\n                    vec![12, 13, 10, 1],\n                    vec![9, 3, 15, 6],\n                    vec![5, 16, 14, 4],\n                    vec![11, 8, 7, 2]\n                ],\n                12\n            ),\n            vec![1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n        );\n        assert_eq!(\n            min_path(vec![vec![2, 7, 4], vec![3, 1, 5], vec![6, 8, 9]], 8),\n            vec![1, 3, 1, 3, 1, 3, 1, 3]\n        );\n\n        assert_eq!(\n            min_path(vec![vec![6, 1, 5], vec![3, 8, 9], vec![2, 7, 4]], 8),\n            vec![1, 5, 1, 5, 1, 5, 1, 5]\n        );\n\n        assert_eq!(\n            min_path(vec![vec![1, 2], vec![3, 4]], 10),\n            vec![1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n        );\n\n        assert_eq!(\n            min_path(vec![vec![1, 3], vec![3, 2]], 10),\n            vec![1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/130",
    "instruction": "Write a Rust function `tri(n: i32) -> Vec<i32>` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.",
    "generated_code": "fn tri(n: i32) -> Vec<i32> {\n    let mut result = vec![0, 1, 3];\n    for i in 3..n+1 {\n        if i % 2 == 0 {\n            result.push(result[i as usize - 1] + result[i as usize - 2] + result[i as usize - 3]);\n        } else {\n            result.push(result[i as usize - 1] + result[i as usize - 2] + result[i as usize - 3] / 2);\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_tri() {\n        assert!(tri(3) == vec![1, 3, 2, 8]);\n        assert!(tri(4) == vec![1, 3, 2, 8, 3]);\n        assert!(tri(5) == vec![1, 3, 2, 8, 3, 15]);\n        assert!(tri(6) == vec![1, 3, 2, 8, 3, 15, 4]);\n        assert!(tri(7) == vec![1, 3, 2, 8, 3, 15, 4, 24]);\n        assert!(tri(8) == vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n        assert!(tri(9) == vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n        assert!(\n            tri(20)\n                == vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n        );\n        assert!(tri(0) == vec![1]);\n        assert!(tri(1) == vec![1, 3]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/131",
    "instruction": "Write a Rust function `digits(n: i32) -> i32` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.",
    "generated_code": "fn digits(n: i32) -> i32 {\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    product\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_digits() {\n        assert_eq!(digits(5), 5);\n        assert_eq!(digits(54), 5);\n        assert_eq!(digits(120), 1);\n        assert_eq!(digits(5014), 5);\n        assert_eq!(digits(98765), 315);\n        assert_eq!(digits(5576543), 2625);\n        assert_eq!(digits(2468), 0);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/132",
    "instruction": "Write a Rust function `is_nested(str: &str) -> bool` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.",
    "generated_code": "fn is_nested(str: &str) -> bool {\n    let mut stack = Vec::new();\n    for c in str.chars() {\n        match c {\n            '[' => stack.push(c),\n            ']' => {\n                if stack.pop() != Some('[') {\n                    return false;\n                }\n            }\n            _ => unreachable!(),\n        }\n    }\n    stack.is_empty()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_nested() {\n        assert_eq!(is_nested(\"[[]]\"), true);\n        assert_eq!(is_nested(\"[]]]]]]][[[[[]\"), false);\n        assert_eq!(is_nested(\"[][]\"), false);\n        assert_eq!(is_nested(\"[]\"), false);\n        assert_eq!(is_nested(\"[[[[]]]]\"), true);\n        assert_eq!(is_nested(\"[]]]]]]]]]]\"), false);\n        assert_eq!(is_nested(\"[][][[]]\"), true);\n        assert_eq!(is_nested(\"[[]\"), false);\n        assert_eq!(is_nested(\"[]]\"), false);\n        assert_eq!(is_nested(\"[[]][[\"), true);\n        assert_eq!(is_nested(\"[[][]]\"), true);\n        assert_eq!(is_nested(\"\"), false);\n        assert_eq!(is_nested(\"[[[[[[[[\"), false);\n        assert_eq!(is_nested(\"]]]]]]]]\"), false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/133",
    "instruction": "Write a Rust function `sum_squares(lst: Vec<f32>) -> i32` to solve the following problem:\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
    "generated_code": "fn sum_squares(lst: Vec<f32>) -> i32 {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x * x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum += x;\n        }\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_sum_squares() {\n        assert_eq!(sum_squares(vec![1.0, 2.0, 3.0]), 14);\n        assert_eq!(sum_squares(vec![1.0, 2.0, 3.0]), 14);\n        assert_eq!(sum_squares(vec![1.0, 3.0, 5.0, 7.0]), 84);\n        assert_eq!(sum_squares(vec![1.4, 4.2, 0.0]), 29);\n        assert_eq!(sum_squares(vec![-2.4, 1.0, 1.0]), 6);\n        assert_eq!(sum_squares(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n        assert_eq!(sum_squares(vec![10000.0, 10000.0]), 200000000);\n        assert_eq!(sum_squares(vec![-1.4, 4.6, 6.3]), 75);\n        assert_eq!(sum_squares(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n        assert_eq!(sum_squares(vec![0.0]), 0);\n        assert_eq!(sum_squares(vec![-1.0]), 1);\n        assert_eq!(sum_squares(vec![-1.0, 1.0, 0.0]), 2);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/134",
    "instruction": "Write a Rust function `check_if_last_char_is_a_letter(txt: &str) -> bool` to solve the following problem:\nCreate a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.",
    "generated_code": "fn check_if_last_char_is_a_letter(txt: &str) -> bool {\n    let mut last_char = txt.chars().last();\n    if last_char.is_none() {\n        return false;\n    }\n    last_char = last_char.unwrap();\n    if last_char.is_alphabetic() {\n        let mut word_end = false;\n        for c in txt.chars().rev() {\n            if c.is_whitespace() {\n                word_end = true;\n                break;\n            }\n        }\n        return word_end;\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_check_if_last_char_is_a_letter() {\n        assert_eq!(check_if_last_char_is_a_letter(\"apple\"), false);\n        assert_eq!(check_if_last_char_is_a_letter(\"apple pi e\"), true);\n        assert_eq!(check_if_last_char_is_a_letter(\"eeeee\"), false);\n        assert_eq!(check_if_last_char_is_a_letter(\"A\"), true);\n        assert_eq!(check_if_last_char_is_a_letter(\"Pumpkin pie \"), false);\n        assert_eq!(check_if_last_char_is_a_letter(\"Pumpkin pie 1\"), false);\n        assert_eq!(check_if_last_char_is_a_letter(\"\"), false);\n        assert_eq!(check_if_last_char_is_a_letter(\"eeeee e \"), false);\n        assert_eq!(check_if_last_char_is_a_letter(\"apple pie\"), false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/135",
    "instruction": "Write a Rust function `can_arrange(arr: Vec<i32>) -> i32` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.",
    "generated_code": "fn can_arrange(arr: Vec<i32>) -> i32 {\n    let mut max_index = -1;\n    for i in 0..arr.len() - 1 {\n        if arr[i] < arr[i + 1] {\n            max_index = i;\n        }\n    }\n    max_index\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n\n    #[test]\n    fn test_can_arrange() {\n        assert_eq!(can_arrange(vec![1, 2, 4, 3, 5]), 3);\n        assert_eq!(can_arrange(vec![1, 2, 4, 5]), -1);\n        assert_eq!(can_arrange(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n        assert_eq!(can_arrange(vec![4, 8, 5, 7, 3]), 4);\n        assert_eq!(can_arrange(vec![]), -1);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/136",
    "instruction": "Write a Rust function `largest_smallest_integers(lst: Vec<i32>) -> Vec<i32>` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.",
    "generated_code": "fn largest_smallest_integers(lst: Vec<i32>) -> Vec<i32> {\n    let mut largest_negative = None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none() {\n                largest_negative = Some(i);\n            } else if i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n            }\n        } else if i > 0 {\n            if smallest_positive.is_none() {\n                smallest_positive = Some(i);\n            } else if i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n            }\n        }\n    }\n    vec![largest_negative.unwrap_or(0), smallest_positive.unwrap_or(0)]\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_largest_smallest_integers() {\n        assert_eq!(\n            largest_smallest_integers(vec![2, 4, 1, 3, 5, 7]),\n            vec![0, 1]\n        );\n        assert_eq!(\n            largest_smallest_integers(vec![2, 4, 1, 3, 5, 7, 0]),\n            vec![0, 1]\n        );\n        assert_eq!(\n            largest_smallest_integers(vec![1, 3, 2, 4, 5, 6, -2]),\n            vec![-2, 1]\n        );\n        assert_eq!(\n            largest_smallest_integers(vec![4, 5, 3, 6, 2, 7, -7]),\n            vec![-7, 2]\n        );\n        assert_eq!(\n            largest_smallest_integers(vec![7, 3, 8, 4, 9, 2, 5, -9]),\n            vec![-9, 2]\n        );\n        assert_eq!(largest_smallest_integers(vec![]), vec![0, 0]);\n        assert_eq!(largest_smallest_integers(vec![0]), vec![0, 0]);\n        assert_eq!(largest_smallest_integers(vec![-1, -3, -5, -6]), vec![-1, 0]);\n        assert_eq!(\n            largest_smallest_integers(vec![-1, -3, -5, -6, 0]),\n            vec![-1, 0]\n        );\n        assert_eq!(\n            largest_smallest_integers(vec![-6, -4, -4, -3, 1]),\n            vec![-3, 1]\n        );\n        assert_eq!(\n            largest_smallest_integers(vec![-6, -4, -4, -3, -100, 1]),\n            vec![-3, 1]\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/137",
    "instruction": "Write a Rust function `compare_one<'a>(a:&'a dyn Any, b:&'a dyn Any) -> RtnType<String,f64,i32>` to solve the following problem:\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_compare_one() {\n        assert_eq!(compare_one(&1, &2), RtnType::Int(2));\n        assert_eq!(compare_one(&1, &2.5), RtnType::Float(2.5));\n        assert_eq!(compare_one(&2, &3), RtnType::Int(3));\n        assert_eq!(compare_one(&5, &6), RtnType::Int(6));\n        assert_eq!(compare_one(&1, &\"2.3\"), RtnType::String(\"2.3\".to_string()));\n        assert_eq!(compare_one(&\"5.1\", &\"6\"), RtnType::String(\"6\".to_string()));\n        assert_eq!(compare_one(&\"1\", &\"2\"), RtnType::String(\"2\".to_string()));\n        assert_eq!(compare_one(&\"1\", &1), RtnType::String(\"None\".to_string()));\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/138",
    "instruction": "Write a Rust function `is_equal_to_sum_even(n: i32) -> bool` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
    "generated_code": "fn is_equal_to_sum_even(n: i32) -> bool {\n    let mut sum = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum += i;\n            if sum == n {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_is_equal_to_sum_even() {\n        assert_eq!(is_equal_to_sum_even(4), false);\n        assert_eq!(is_equal_to_sum_even(6), false);\n        assert_eq!(is_equal_to_sum_even(8), true);\n        assert_eq!(is_equal_to_sum_even(10), true);\n        assert_eq!(is_equal_to_sum_even(11), false);\n        assert_eq!(is_equal_to_sum_even(12), true);\n        assert_eq!(is_equal_to_sum_even(13), false);\n        assert_eq!(is_equal_to_sum_even(16), true);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/139",
    "instruction": "Write a Rust function `special_factorial(n: i32) -> i64` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nThe function will receive an integer as input and should return the special\nfactorial of this integer.",
    "generated_code": "fn special_factorial(n: i32) -> i64 {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result *= i;\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_special_factorial() {\n        assert_eq!(special_factorial(4), 288);\n        assert_eq!(special_factorial(5), 34560);\n        assert_eq!(special_factorial(7), 125411328000);\n        assert_eq!(special_factorial(1), 1);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/140",
    "instruction": "Write a Rust function `fix_spaces(text: &str) -> String` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -",
    "generated_code": "fn fix_spaces(text: &str) -> String {\n    text.replace(\" \", \"_\").replace(\"  \", \"-\")\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_fix_spaces() {\n        assert_eq!(fix_spaces(\"Example\"), \"Example\");\n        assert_eq!(fix_spaces(\"Mudasir Hanif \"), \"Mudasir_Hanif_\");\n        assert_eq!(\n            fix_spaces(\"Yellow Yellow  Dirty  Fellow\"),\n            \"Yellow_Yellow__Dirty__Fellow\"\n        );\n        assert_eq!(fix_spaces(\"Exa   mple\"), \"Exa-mple\");\n        assert_eq!(fix_spaces(\"   Exa 1 2 2 mple\"), \"-Exa_1_2_2_mple\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/141",
    "instruction": "Write a Rust function `file_name_check(file_name: &str) -> &str` to solve the following problem:\nCreate a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
    "generated_code": "fn file_name_check(file_name: &str) -> &str {\n    let mut count = 0;\n    let mut dot_index = 0;\n    let mut dot_found = false;\n    let mut first_letter = false;\n    let mut valid = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n            count += 1;\n        }\n        if c == '.' {\n            dot_index = i;\n            dot_found = true;\n        }\n        if c.is_alphabetic() {\n            first_letter = true;\n        }\n    }\n    if count > 3 || !dot_found || !first_letter {\n        valid = false;\n    }\n    if valid {\n        let ext = &file_name[dot_index + 1..];\n        if ext != \"txt\" && ext != \"exe\" && ext != \"dll\" {\n            valid = false;\n        }\n    }\n    if valid {\n        \"Yes\"\n    } else {\n        \"No\"\n    }\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_file_name_check() {\n        assert_eq!(file_name_check(\"example.txt\"), \"Yes\");\n        assert_eq!(file_name_check(\"1example.dll\"), \"No\");\n        assert_eq!(file_name_check(\"s1sdf3.asd\"), \"No\");\n        assert_eq!(file_name_check(\"K.dll\"), \"Yes\");\n        assert_eq!(file_name_check(\"MY16FILE3.exe\"), \"Yes\");\n        assert_eq!(file_name_check(\"His12FILE94.exe\"), \"No\");\n        assert_eq!(file_name_check(\"_Y.txt\"), \"No\");\n        assert_eq!(file_name_check(\"?aREYA.exe\"), \"No\");\n        assert_eq!(file_name_check(\"/this_is_valid.dll\"), \"No\");\n        assert_eq!(file_name_check(\"this_is_valid.wow\"), \"No\");\n        assert_eq!(file_name_check(\"this_is_valid.txt\"), \"Yes\");\n        assert_eq!(file_name_check(\"this_is_valid.txtexe\"), \"No\");\n        assert_eq!(file_name_check(\"#this2_i4s_5valid.ten\"), \"No\");\n        assert_eq!(file_name_check(\"@this1_is6_valid.exe\"), \"No\");\n        assert_eq!(file_name_check(\"this_is_12valid.6exe4.txt\"), \"No\");\n        assert_eq!(file_name_check(\"all.exe.txt\"), \"No\");\n        assert_eq!(file_name_check(\"I563_No.exe\"), \"Yes\");\n        assert_eq!(file_name_check(\"Is3youfault.txt\"), \"Yes\");\n        assert_eq!(file_name_check(\"no_one#knows.dll\"), \"Yes\");\n        assert_eq!(file_name_check(\"1I563_Yes3.exe\"), \"No\");\n        assert_eq!(file_name_check(\"I563_Yes3.txtt\"), \"No\");\n        assert_eq!(file_name_check(\"final..txt\"), \"No\");\n        assert_eq!(file_name_check(\"final132\"), \"No\");\n        assert_eq!(file_name_check(\"_f4indsartal132.\"), \"No\");\n        assert_eq!(file_name_check(\".txt\"), \"No\");\n        assert_eq!(file_name_check(\"s.\"), \"No\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/142",
    "instruction": "Write a Rust function `sum_squares_142(lst: Vec<i32>) -> i32` to solve the following problem:\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
    "generated_code": "fn sum_squares_142(lst: Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v * v;\n        } else if i % 4 == 0 {\n            sum += v * v * v;\n        } else {\n            sum += *v;\n        }\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_sum_squares_142() {\n        assert_eq!(sum_squares_142(vec![1, 2, 3]), 6);\n        assert_eq!(sum_squares_142(vec![1, 4, 9]), 14);\n        assert_eq!(sum_squares_142(vec![]), 0);\n        assert_eq!(sum_squares_142(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n        assert_eq!(\n            sum_squares_142(vec![-1, -1, -1, -1, -1, -1, -1, -1, -1]),\n            -3\n        );\n        assert_eq!(sum_squares_142(vec![0]), 0);\n        assert_eq!(sum_squares_142(vec![-1, -5, 2, -1, -5]), -126);\n        assert_eq!(sum_squares_142(vec![-56, -99, 1, 0, -2]), 3030);\n        assert_eq!(sum_squares_142(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n        assert_eq!(\n            sum_squares_142(vec![\n                -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37\n            ]),\n            -14196\n        );\n        assert_eq!(\n            sum_squares_142(vec![\n                -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10\n            ]),\n            -1448\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/143",
    "instruction": "Write a Rust function `words_in_sentence(sentence: &str) -> String` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters",
    "generated_code": "fn words_in_sentence(sentence: &str) -> String {\n    let mut words = sentence.split_whitespace().collect::<Vec<&str>>();\n    words.sort_by_key(|word| word.len());\n    words.into_iter().filter(|word| is_prime(word.len())).collect::<Vec<&str>>().join(\" \")\n}\n\nfn is_prime(n: usize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as usize + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_words_in_sentence() {\n        assert_eq!(words_in_sentence(\"This is a test\"), \"is\");\n        assert_eq!(words_in_sentence(\"lets go for swimming\"), \"go for\");\n        assert_eq!(\n            words_in_sentence(\"there is no place available here\"),\n            \"there is no place\"\n        );\n        assert_eq!(words_in_sentence(\"Hi I am Hussein\"), \"Hi am Hussein\");\n        assert_eq!(words_in_sentence(\"go for it\"), \"go for it\");\n        assert_eq!(words_in_sentence(\"here\"), \"\");\n        assert_eq!(words_in_sentence(\"here is\"), \"is\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/144",
    "instruction": "Write a Rust function `simplify(x: &str, n: &str) -> bool` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.",
    "generated_code": "fn simplify(x: &str, n: &str) -> bool {\n    let x_num: u64 = x.split(\"/\").next().unwrap().parse().unwrap();\n    let x_den: u64 = x.split(\"/\").nth(1).unwrap().parse().unwrap();\n    let n_num: u64 = n.split(\"/\").next().unwrap().parse().unwrap();\n    let n_den: u64 = n.split(\"/\").nth(1).unwrap().parse().unwrap();\n    let product = x_num * n_num;\n    let gcd = gcd(x_den, n_den);\n    product % gcd == 0\n}\nfn gcd(mut a: u64, mut b: u64) -> u64 {\n    while b != 0 {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_simplify() {\n        assert_eq!(simplify(\"1/5\", \"5/1\"), true);\n        assert_eq!(simplify(\"1/6\", \"2/1\"), false);\n        assert_eq!(simplify(\"5/1\", \"3/1\"), true);\n        assert_eq!(simplify(\"7/10\", \"10/2\"), false);\n        assert_eq!(simplify(\"2/10\", \"50/10\"), true);\n        assert_eq!(simplify(\"7/2\", \"4/2\"), true);\n        assert_eq!(simplify(\"11/6\", \"6/1\"), true);\n        assert_eq!(simplify(\"2/3\", \"5/2\"), false);\n        assert_eq!(simplify(\"5/2\", \"3/5\"), false);\n        assert_eq!(simplify(\"2/4\", \"8/4\"), true);\n        assert_eq!(simplify(\"2/4\", \"4/2\"), true);\n        assert_eq!(simplify(\"1/5\", \"5/1\"), true);\n        assert_eq!(simplify(\"1/5\", \"1/5\"), false);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/145",
    "instruction": "Write a Rust function `order_by_points(arr: Vec<i32>) -> Vec<i32>` to solve the following problem:\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.",
    "generated_code": "fn order_by_points(arr: Vec<i32>) -> Vec<i32> {\n    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let sum_a = sum_of_digits(*a);\n        let sum_b = sum_of_digits(*b);\n        if sum_a == sum_b {\n            a.cmp(b)\n        } else {\n            sum_a.cmp(&sum_b)\n        }\n    });\n    arr\n}\n\nfn sum_of_digits(n: i32) -> i32 {\n    let mut sum = 0;\n    let mut n = n;\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_order_by_points() {\n        assert_eq!(\n            order_by_points(vec![1, 11, -1, -11, -12]),\n            vec![-1, -11, 1, -12, 11]\n        );\n        assert_eq!(\n            order_by_points(vec![\n                1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46\n            ]),\n            vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n        );\n        assert_eq!(order_by_points(vec![]), vec![]);\n        assert_eq!(\n            order_by_points(vec![1, -11, -32, 43, 54, -98, 2, -3]),\n            vec![-3, -32, -98, -11, 1, 2, 43, 54]\n        );\n        assert_eq!(\n            order_by_points(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),\n            vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n        );\n        assert_eq!(\n            order_by_points(vec![0, 6, 6, -76, -21, 23, 4]),\n            vec![-76, -21, 0, 4, 23, 6, 6]\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/146",
    "instruction": "Write a Rust function `special_filter(nums: Vec<i32>) -> i32` to solve the following problem:\nWrite a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).",
    "generated_code": "fn special_filter(nums: Vec<i32>) -> i32 {\n    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n            let first_digit = num / 10;\n            let last_digit = num % 10;\n            if first_digit % 2 == 1 && last_digit % 2 == 1 {\n                count += 1;\n            }\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_special_filter() {\n        assert_eq!(special_filter(vec![5, -2, 1, -5]), 0);\n        assert_eq!(special_filter(vec![15, -73, 14, -15]), 1);\n        assert_eq!(special_filter(vec![33, -2, -3, 45, 21, 109]), 2);\n        assert_eq!(special_filter(vec![43, -12, 93, 125, 121, 109]), 4);\n        assert_eq!(special_filter(vec![71, -2, -33, 75, 21, 19]), 3);\n        assert_eq!(special_filter(vec![1]), 0);\n        assert_eq!(special_filter(vec![]), 0);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/147",
    "instruction": "Write a Rust function `get_matrix_triples(n: i32) -> i32` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.",
    "generated_code": "fn get_matrix_triples(n: i32) -> i32 {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n            for k in j+1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_get_matrix_triples() {\n        assert_eq!(get_matrix_triples(5), 1);\n        assert_eq!(get_matrix_triples(6), 4);\n        assert_eq!(get_matrix_triples(10), 36);\n        assert_eq!(get_matrix_triples(100), 53361);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/148",
    "instruction": "Write a Rust function `bf(planet1: &str, planet2: &str) -> Vec<String>` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_bf() {\n        assert_eq!(bf(\"Jupiter\", \"Neptune\"), vec![\"Saturn\", \"Uranus\"]);\n        assert_eq!(bf(\"Earth\", \"Mercury\"), vec![\"Venus\"]);\n        assert_eq!(\n            bf(\"Mercury\", \"Uranus\"),\n            vec![\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        );\n        assert_eq!(\n            bf(\"Neptune\", \"Venus\"),\n            vec![\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n        );\n        let v_empty: Vec<&str> = vec![];\n        assert_eq!(bf(\"Earth\", \"Earth\"), v_empty);\n        assert_eq!(bf(\"Mars\", \"Earth\"), v_empty);\n        assert_eq!(bf(\"Jupiter\", \"Makemake\"), v_empty);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/149",
    "instruction": "Write a Rust function `sorted_list_sum(lst: Vec<&str>) -> Vec<&str>` to solve the following problem:\nWrite a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.",
    "generated_code": "fn sorted_list_sum(lst: Vec<&str>) -> Vec<&str> {\n    let mut result = Vec::new();\n    for word in lst {\n        if word.len() % 2 == 0 {\n            result.push(word);\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.len() == b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n        }\n    });\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n   #[test]\n    fn test_sorted_list_sum() {\n        assert_eq!(sorted_list_sum(vec![\"aa\", \"a\", \"aaa\"]), vec![\"aa\"]);\n        assert_eq!(\n            sorted_list_sum(vec![\"school\", \"AI\", \"asdf\", \"b\"]),\n            vec![\"AI\", \"asdf\", \"school\"]\n        );\n        let v_empty: Vec<&str> = vec![];\n        assert_eq!(sorted_list_sum(vec![\"d\", \"b\", \"c\", \"a\"]), v_empty);\n        assert_eq!(\n            sorted_list_sum(vec![\"d\", \"dcba\", \"abcd\", \"a\"]),\n            vec![\"abcd\", \"dcba\"]\n        );\n        assert_eq!(\n            sorted_list_sum(vec![\"AI\", \"ai\", \"au\"]),\n            vec![\"AI\", \"ai\", \"au\"]\n        );\n        assert_eq!(sorted_list_sum(vec![\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]), v_empty);\n        assert_eq!(\n            sorted_list_sum(vec![\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),\n            vec![\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/150",
    "instruction": "Write a Rust function `x_or_y(n: i32, x: i32, y: i32) -> i32` to solve the following problem:\nA simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.",
    "generated_code": "fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n % 2 == 0 {\n        return x;\n    }\n    return y;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_x_or_y() {\n        assert_eq!(x_or_y(7, 34, 12), 34);\n        assert_eq!(x_or_y(15, 8, 5), 5);\n        assert_eq!(x_or_y(3, 33, 5212), 33);\n        assert_eq!(x_or_y(1259, 3, 52), 3);\n        assert_eq!(x_or_y(7919, -1, 12), -1);\n        assert_eq!(x_or_y(3609, 1245, 583), 583);\n        assert_eq!(x_or_y(91, 56, 129), 129);\n        assert_eq!(x_or_y(6, 34, 1234), 1234);\n        assert_eq!(x_or_y(1, 2, 0), 0);\n        assert_eq!(x_or_y(2, 2, 0), 2);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/151",
    "instruction": "Write a Rust function `double_the_difference(lst: Vec<f32>) -> i64` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\nIf the input list is empty, return 0.",
    "generated_code": "fn double_the_difference(lst: Vec<f32>) -> i64 {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive() && i.fract() == 0.0 {\n            sum += i.powi(2);\n        }\n    }\n    sum\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_double_the_difference() {\n        assert_eq!(double_the_difference(vec![]), 0);\n        assert_eq!(double_the_difference(vec![5.0, 4.0]), 25);\n        assert_eq!(double_the_difference(vec![0.1, 0.2, 0.3]), 0);\n        assert_eq!(double_the_difference(vec![-10.0, -20.0, -30.0]), 0);\n        assert_eq!(double_the_difference(vec![-1.0, -2.0, 8.0]), 0);\n        assert_eq!(double_the_difference(vec![0.2, 3.0, 5.0]), 34);\n\n        let mut lst = vec![];\n        let mut odd_sum = 0;\n        for i in -99..100 {\n            lst.push(i as f32);\n            if i > 0 && i % 2 == 1 {\n                odd_sum += i * i;\n            }\n        }\n        assert_eq!(double_the_difference(lst), odd_sum);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/152",
    "instruction": "Write a Rust function `compare(game: Vec<i32>, guess: Vec<i32>) -> Vec<i32>` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.",
    "generated_code": "fn compare(game: Vec<i32>, guess: Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_compare() {\n        assert_eq!(\n            compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]),\n            vec![0, 0, 0, 0, 3, 3]\n        );\n        assert_eq!(\n            compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2]),\n            vec![4, 4, 1, 0, 0, 6]\n        );\n        assert_eq!(\n            compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]),\n            vec![0, 0, 0, 0, 3, 3]\n        );\n        assert_eq!(\n            compare(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]),\n            vec![0, 0, 0, 0, 0, 0]\n        );\n        assert_eq!(compare(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n        assert_eq!(\n            compare(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]),\n            vec![2, 0, 0, 1]\n        );\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/153",
    "instruction": "Write a Rust function `strongest_extension(class_name: &str, extensions: Vec<&str>) -> String` to solve the following problem:\nYou will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n(its strength is -1).",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_strongest_extension() {\n        assert_eq!(\n            strongest_extension(\"Watashi\", vec![\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\n            \"Watashi.eIGHt8OKe\"\n        );\n        assert_eq!(\n            strongest_extension(\"Boku123\", vec![\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\n            \"Boku123.YEs.WeCaNe\"\n        );\n        assert_eq!(\n            strongest_extension(\n                \"__YESIMHERE\",\n                vec![\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]\n            ),\n            \"__YESIMHERE.NuLl__\"\n        );\n        assert_eq!(\n            strongest_extension(\"K\", vec![\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\n            \"K.TAR\"\n        );\n        assert_eq!(\n            strongest_extension(\"__HAHA\", vec![\"Tab\", \"123\", \"781345\", \"-_-\"]),\n            \"__HAHA.123\"\n        );\n        assert_eq!(\n            strongest_extension(\n                \"YameRore\",\n                vec![\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]\n            ),\n            \"YameRore.okIWILL123\"\n        );\n        assert_eq!(\n            strongest_extension(\"finNNalLLly\", vec![\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\n            \"finNNalLLly.WoW\"\n        );\n        assert_eq!(strongest_extension(\"_\", vec![\"Bb\", \"91245\"]), \"_.Bb\");\n        assert_eq!(strongest_extension(\"Sp\", vec![\"671235\", \"Bb\"]), \"Sp.671235\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/154",
    "instruction": "Write a Rust function `cycpattern_check(a: &str, b: &str) -> bool` to solve the following problem:\nYou are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
    "generated_code": "fn cycpattern_check(a: &str, b: &str) -> bool {\n    let len = b.len();\n    for i in 0..len {\n        if a.contains(&b[i..i+len]) {\n            return true;\n        }\n    }\n    return false;\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_cycpattern_check() {\n        assert_eq!(cycpattern_check(\"xyzw\", \"xyw\"), false);\n        assert_eq!(cycpattern_check(\"yello\", \"ell\"), true);\n        assert_eq!(cycpattern_check(\"whattup\", \"ptut\"), false);\n        assert_eq!(cycpattern_check(\"efef\", \"fee\"), true);\n        assert_eq!(cycpattern_check(\"abab\", \"aabb\"), false);\n        assert_eq!(cycpattern_check(\"winemtt\", \"tinem\"), true);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/155",
    "instruction": "Write a Rust function `even_odd_count(num: i32) -> Vec<i32>` to solve the following problem:\nGiven an integer. return a tuple that has the number of even and odd digits respectively.",
    "generated_code": "fn even_odd_count(num: i32) -> Vec<i32> {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n    while num > 0 {\n        let digit = num % 10;\n        num /= 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    vec![even, odd]\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_even_odd() {\n        assert_eq!(even_odd_count(7), vec![0, 1]);\n        assert_eq!(even_odd_count(-78), vec![1, 1]);\n        assert_eq!(even_odd_count(3452), vec![2, 2]);\n        assert_eq!(even_odd_count(346211), vec![3, 3]);\n        assert_eq!(even_odd_count(-345821), vec![3, 3]);\n        assert_eq!(even_odd_count(-2), vec![1, 0]);\n        assert_eq!(even_odd_count(-45347), vec![2, 3]);\n        assert_eq!(even_odd_count(0), vec![1, 0]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/156",
    "instruction": "Write a Rust function `int_to_mini_romank(number: i32) -> String` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000",
    "generated_code": "None",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_int_to_mini_romank() {\n        assert_eq!(int_to_mini_romank(19), \"xix\");\n        assert_eq!(int_to_mini_romank(152), \"clii\");\n        assert_eq!(int_to_mini_romank(251), \"ccli\");\n        assert_eq!(int_to_mini_romank(426), \"cdxxvi\");\n        assert_eq!(int_to_mini_romank(500), \"d\");\n        assert_eq!(int_to_mini_romank(1), \"i\");\n        assert_eq!(int_to_mini_romank(4), \"iv\");\n        assert_eq!(int_to_mini_romank(43), \"xliii\");\n        assert_eq!(int_to_mini_romank(90), \"xc\");\n        assert_eq!(int_to_mini_romank(94), \"xciv\");\n        assert_eq!(int_to_mini_romank(532), \"dxxxii\");\n        assert_eq!(int_to_mini_romank(900), \"cm\");\n        assert_eq!(int_to_mini_romank(994), \"cmxciv\");\n        assert_eq!(int_to_mini_romank(1000), \"m\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/157",
    "instruction": "Write a Rust function `right_angle_triangle(a: f32, b: f32, c: f32) -> bool` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.",
    "generated_code": "fn right_angle_triangle(a: f32, b: f32, c: f32) -> bool {\n    let p = (a * a + b * b - c * c) / (2.0 * a * b);\n    let q = (a * a - b * b + c * c) / (2.0 * a * c);\n    let r = (b * b - a * a + c * c) / (2.0 * b * c);\n    p * p + q * q + r * r == 1.0\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_right_angle_triangle() {\n        assert_eq!(right_angle_triangle(3.0, 4.0, 5.0), true);\n        assert_eq!(right_angle_triangle(1.0, 2.0, 3.0), false);\n        assert_eq!(right_angle_triangle(10.0, 6.0, 8.0), true);\n        assert_eq!(right_angle_triangle(2.0, 2.0, 2.0), false);\n        assert_eq!(right_angle_triangle(7.0, 24.0, 25.0), true);\n        assert_eq!(right_angle_triangle(10.0, 5.0, 7.0), false);\n        assert_eq!(right_angle_triangle(5.0, 12.0, 13.0), true);\n        assert_eq!(right_angle_triangle(15.0, 8.0, 17.0), true);\n        assert_eq!(right_angle_triangle(48.0, 55.0, 73.0), true);\n        assert_eq!(right_angle_triangle(1.0, 1.0, 1.0), false);\n        assert_eq!(right_angle_triangle(2.0, 2.0, 10.0), false);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/158",
    "instruction": "Write a Rust function `find_max(words: Vec<&str>) -> &str` to solve the following problem:\nWrite a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_find_max() {\n        assert_eq!(find_max(vec![\"name\", \"of\", \"string\"]), \"string\");\n        assert_eq!(find_max(vec![\"name\", \"enam\", \"game\"]), \"enam\");\n        assert_eq!(find_max(vec![\"aaaaaaa\", \"bb\", \"cc\"]), \"aaaaaaa\");\n        assert_eq!(find_max(vec![\"abc\", \"cba\"]), \"abc\");\n        assert_eq!(\n            find_max(vec![\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\n            \"footbott\"\n        );\n        assert_eq!(find_max(vec![\"we\", \"are\", \"gonna\", \"rock\"]), \"gonna\");\n        assert_eq!(find_max(vec![\"we\", \"are\", \"a\", \"mad\", \"nation\"]), \"nation\");\n        assert_eq!(find_max(vec![\"this\", \"is\", \"a\", \"prrk\"]), \"this\");\n        assert_eq!(find_max(vec![\"b\"]), \"b\");\n        assert_eq!(find_max(vec![\"play\", \"play\", \"play\"]), \"play\");\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/159",
    "instruction": "Write a Rust function `eat(number: i32, need: i32, remaining: i32) -> Vec<i32>` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)",
    "generated_code": "fn eat(number: i32, need: i32, remaining: i32) -> Vec<i32> {\n    let mut total = number;\n    let mut left = remaining;\n    if need > left {\n        total += left;\n        left = 0;\n    } else {\n        total += need;\n        left -= need;\n    }\n    vec![total, left]\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_eat() {\n        assert_eq!(eat(5, 6, 10), vec![11, 4]);\n        assert_eq!(eat(4, 8, 9), vec![12, 1]);\n        assert_eq!(eat(1, 10, 10), vec![11, 0]);\n        assert_eq!(eat(2, 11, 5), vec![7, 0]);\n        assert_eq!(eat(4, 5, 7), vec![9, 2]);\n        assert_eq!(eat(4, 5, 1), vec![5, 0]);\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/160",
    "instruction": "Write a Rust function `do_algebra(operato: Vec<&str>, operand: Vec<i32>) -> i32` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.",
    "generated_code": "fn do_algebra(operator: Vec<&str>, operand: Vec<i32>) -> i32 {\n    let mut result = operand[0];\n    for i in 1..operand.len() {\n        match operator[i - 1] {\n            \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n            \"*\" => result *= operand[i],\n            \"/\" => result /= operand[i],\n            \"**\" => result = result.pow(operand[i]),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_do_algebra() {\n        assert_eq!(do_algebra(vec![\"**\", \"*\", \"+\"], vec![2, 3, 4, 5]), 37);\n        assert_eq!(do_algebra(vec![\"+\", \"*\", \"-\"], vec![2, 3, 4, 5]), 9);\n        assert_eq!(do_algebra(vec![\"//\", \"*\"], vec![7, 3, 4]), 8);\n    }\n\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/161",
    "instruction": "Write a Rust function `solve_161(s: &str) -> String` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.",
    "generated_code": "fn solve_161(s: &str) -> String {\n    let mut res = String::new();\n    let mut is_letter = false;\n    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push(c.to_uppercase().next().unwrap());\n            is_letter = true;\n        } else if c.is_uppercase() {\n            res.push(c.to_lowercase().next().unwrap());\n            is_letter = true;\n        } else {\n            res.push(c);\n        }\n    }\n    if !is_letter {\n        res = res.chars().rev().collect();\n    }\n    res\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_solve_161() {\n        assert_eq!(solve_161(\"AsDf\"), \"aSdF\");\n        assert_eq!(solve_161(\"1234\"), \"4321\");\n        assert_eq!(solve_161(\"ab\"), \"AB\");\n        assert_eq!(solve_161(\"#a@C\"), \"#A@c\");\n        assert_eq!(solve_161(\"#AsdfW^45\"), \"#aSDFw^45\");\n        assert_eq!(solve_161(\"#6@2\"), \"2@6#\");\n        assert_eq!(solve_161(\"#$a^D\"), \"#$A^d\");\n        assert_eq!(solve_161(\"#ccc\"), \"#CCC\");\n    }\n\n}\n",
    "result": 1,
    "error_type": null
  },
  {
    "task_id": "Rust/162",
    "instruction": "Write a Rust function `string_to_md5(text: &str) -> String` to solve the following problem:\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.",
    "generated_code": "",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_string_to_md5() {\n        assert_eq!(\n            string_to_md5(\"Hello world\"),\n            \"3e25960a79dbc69b674cd4ec67a72c62\"\n        );\n        assert_eq!(string_to_md5(\"\"), \"None\");\n        assert_eq!(string_to_md5(\"A B C\"), \"0ef78513b0cb8cef12743f5aeb35f888\");\n        assert_eq!(\n            string_to_md5(\"password\"),\n            \"5f4dcc3b5aa765d61d8327deb882cf99\"\n        );\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  },
  {
    "task_id": "Rust/163",
    "instruction": "Write a Rust function `generate_integers(a: i32, b: i32) -> Vec<i32>` to solve the following problem:\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.",
    "generated_code": "fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in a..b+1 {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}",
    "test": "\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_generate_integers() {\n        assert_eq!(generate_integers(2, 10), vec![2, 4, 6, 8]);\n        assert_eq!(generate_integers(10, 2), vec![2, 4, 6, 8]);\n        assert_eq!(generate_integers(132, 2), vec![2, 4, 6, 8]);\n        assert_eq!(generate_integers(17, 89), vec![]);\n    }\n\n}\n",
    "result": 0,
    "error_type": "Incorrect Result"
  }
]